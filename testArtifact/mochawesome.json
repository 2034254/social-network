{
  "stats": {
    "suites": 7,
    "tests": 70,
    "passes": 70,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-07T20:10:28.698Z",
    "end": "2023-12-07T20:10:36.517Z",
    "duration": 7819,
    "testsRegistered": 70,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2cc594cd-bbcf-4ce3-af17-1ea6adbfdd80",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1154,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await dbHandler.closeDatabase();\nawait dbHandler.connect();\npopulate();",
          "err": {},
          "uuid": "93072c61-7bd8-40e5-905e-f64cf70d9e53",
          "parentUUID": "2cc594cd-bbcf-4ce3-af17-1ea6adbfdd80",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 937,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await dbHandler.clearDatabase();\nawait dbHandler.closeDatabase();",
          "err": {},
          "uuid": "c316ab3d-5253-4bb7-8e0d-86b85ee30a8b",
          "parentUUID": "2cc594cd-bbcf-4ce3-af17-1ea6adbfdd80",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
          "title": "/api/user/signup",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\1_addUser.test.js",
          "file": "\\test\\1_addUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user",
              "fullTitle": "/api/user/signup should create user",
              "timedOut": false,
              "duration": 1007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(201)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    if (process.env.ENABLE_SEND_EMAIL === \"true\") {\n      expect(res.body.message).to.equal(\"Verify your email address\");\n    } else {\n      expect(res.body.message).to.equal(\"Account created\");\n    }\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "9d7cae2e-c8fb-44ce-8172-7bb6bde96c52",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if documents in collections are created",
              "fullTitle": "/api/user/signup check if documents in collections are created",
              "timedOut": false,
              "duration": 155,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.find({ username: user.username })\n  .select(\"_id\")\n  .then((user) => {\n    expect(user, \"only one user should be created\").to.have.lengthOf(1);\n    const a = Following.find({ user: user[0]._id });\n    const b = Followers.find({ user: user[0]._id });\n    Promise.all([a, b])\n      .then((documents) => {\n        const [doc1, doc2] = documents;\n        const userId = user[0]._id.toString();\n        const doc1UserId = doc1[0].user.toString();\n        const doc2UserId = doc2[0].user.toString();\n        expect(\n          doc1,\n          \"one document in Followers should be created\"\n        ).to.have.lengthOf(1);\n        expect(doc1UserId).to.equal(userId);\n        expect(\n          doc2,\n          \"one document in Followers should be created\"\n        ).to.have.lengthOf(1);\n        expect(doc2UserId).to.equal(userId);\n        done();\n      })\n      .catch((err) => done(err));\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "23bf0d1e-d4a1-4756-881a-a1b96f9a5726",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username exists",
              "fullTitle": "/api/user/signup should not create user if username exists",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(409)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\"Username exists\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "9b2aefca-a1df-4742-96c7-4e796a5cf7f6",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email exists",
              "fullTitle": "/api/user/signup should not create user if email exists",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"janedoe\" })\n  .expect(409)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\"Email exists\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "11d2c94f-11cf-482e-801a-f58da1982774",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username is invalid",
              "fullTitle": "/api/user/signup should not create user if username is invalid",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"john doe\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "4abe395c-808a-41a2-b230-eb310c26d036",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username is invalid",
              "fullTitle": "/api/user/signup should not create user if username is invalid",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"john@doe\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "5ffd6c86-bf73-4c17-84ed-88d0e4fc7159",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is invalid",
              "fullTitle": "/api/user/signup should not create user if email is invalid",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"janedoe.com\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "1ac86348-1cc1-4f67-b196-c4b40d32eb20",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is invalid",
              "fullTitle": "/api/user/signup should not create user if email is invalid",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"janedoe@com\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "607dddb6-d276-4a12-be96-86dbd47ac921",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is invalid",
              "fullTitle": "/api/user/signup should not create user if email is invalid",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"janedoecom\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "353b41d4-1d60-4c0b-af4c-c78fc27d240c",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without firstName",
              "fullTitle": "/api/user/signup should not create user without firstName",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.firstName;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"firstName\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "6ba86755-cc87-48d0-9675-7bd7b1f6d4cd",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without lastName",
              "fullTitle": "/api/user/signup should not create user without lastName",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.lastName;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"lastName\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "9516669c-bc8d-41df-9fac-e95c6fc66016",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without username",
              "fullTitle": "/api/user/signup should not create user without username",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.username;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"username\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "58f89228-60d9-475d-bd4e-050259adaab2",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without email",
              "fullTitle": "/api/user/signup should not create user without email",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.email;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"email\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "39b2cb14-393f-4e46-b5c1-0409451420dc",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without password",
              "fullTitle": "/api/user/signup should not create user without password",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.password;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"password\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "07e5fe60-011c-4e11-95fb-8b9da6cb01c6",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without retypepassword",
              "fullTitle": "/api/user/signup should not create user without retypepassword",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.retypepassword;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"retypepassword\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "eb0e2e3a-6b07-4566-be40-1c9fff13d652",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if firstname is empty",
              "fullTitle": "/api/user/signup should not create user if firstname is empty",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, firstName: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"firstName\" is not allowed to be empty'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "2457cfcc-c0b2-4834-8231-f4849d04aecb",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if lastname is empty",
              "fullTitle": "/api/user/signup should not create user if lastname is empty",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, lastName: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"lastName\" is not allowed to be empty'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "1dce0988-63f7-4c98-ba9d-1a556268e83d",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username is empty",
              "fullTitle": "/api/user/signup should not create user if username is empty",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"username\" is not allowed to be empty'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "ed926e4c-78ff-4265-b319-8811eca4c5c8",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is empty",
              "fullTitle": "/api/user/signup should not create user if email is empty",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"email\" is not allowed to be empty');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "138648e4-2def-435e-900c-a80c124bb0ba",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if password is empty",
              "fullTitle": "/api/user/signup should not create user if password is empty",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, password: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"password\" is not allowed to be empty'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "240c573d-5c12-4898-821e-110cf1b2b871",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if retypepassword is empty",
              "fullTitle": "/api/user/signup should not create user if retypepassword is empty",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, retypepassword: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"retypepassword\" must be [ref:password]'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "2430cdef-9fa7-4870-8240-cd5c8d4b255a",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if firstname is too long",
              "fullTitle": "/api/user/signup should not create user if firstname is too long",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, firstName: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"firstName\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "d8f37684-a1f0-407c-ad71-0fa3744db8ff",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if lastname is too long",
              "fullTitle": "/api/user/signup should not create user if lastname is too long",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, lastName: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"lastName\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "f7ccde05-f40d-473c-9ed4-cdf883a68a97",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username is too long",
              "fullTitle": "/api/user/signup should not create user if username is too long",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"username\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "333662db-4ae1-4bc0-b6dd-cfa9860e2bbb",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is too long",
              "fullTitle": "/api/user/signup should not create user if email is too long",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"email\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "bff1b992-2bf1-405f-a082-1bf584c35e10",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if password is too long",
              "fullTitle": "/api/user/signup should not create user if password is too long",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, password: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"password\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "2774608e-b6fc-44ab-ab4b-3c52ea397a34",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if retypepassword is too long",
              "fullTitle": "/api/user/signup should not create user if retypepassword is too long",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, retypepassword: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"retypepassword\" must be [ref:password]'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "ce4ff44c-586a-478d-8b85-d706ed5001a5",
              "parentUUID": "b3052519-7b49-4000-a4db-ad0baa5a9e68",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d7cae2e-c8fb-44ce-8172-7bb6bde96c52",
            "23bf0d1e-d4a1-4756-881a-a1b96f9a5726",
            "9b2aefca-a1df-4742-96c7-4e796a5cf7f6",
            "11d2c94f-11cf-482e-801a-f58da1982774",
            "4abe395c-808a-41a2-b230-eb310c26d036",
            "5ffd6c86-bf73-4c17-84ed-88d0e4fc7159",
            "1ac86348-1cc1-4f67-b196-c4b40d32eb20",
            "607dddb6-d276-4a12-be96-86dbd47ac921",
            "353b41d4-1d60-4c0b-af4c-c78fc27d240c",
            "6ba86755-cc87-48d0-9675-7bd7b1f6d4cd",
            "9516669c-bc8d-41df-9fac-e95c6fc66016",
            "58f89228-60d9-475d-bd4e-050259adaab2",
            "39b2cb14-393f-4e46-b5c1-0409451420dc",
            "07e5fe60-011c-4e11-95fb-8b9da6cb01c6",
            "eb0e2e3a-6b07-4566-be40-1c9fff13d652",
            "2457cfcc-c0b2-4834-8231-f4849d04aecb",
            "1dce0988-63f7-4c98-ba9d-1a556268e83d",
            "ed926e4c-78ff-4265-b319-8811eca4c5c8",
            "138648e4-2def-435e-900c-a80c124bb0ba",
            "240c573d-5c12-4898-821e-110cf1b2b871",
            "2430cdef-9fa7-4870-8240-cd5c8d4b255a",
            "d8f37684-a1f0-407c-ad71-0fa3744db8ff",
            "f7ccde05-f40d-473c-9ed4-cdf883a68a97",
            "333662db-4ae1-4bc0-b6dd-cfa9860e2bbb",
            "bff1b992-2bf1-405f-a082-1bf584c35e10",
            "2774608e-b6fc-44ab-ab4b-3c52ea397a34",
            "ce4ff44c-586a-478d-8b85-d706ed5001a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1518,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "54e6c334-0c6e-40f8-99e4-fae3626beb2a",
          "title": "/api/user/login",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\2_loginUser.test.js",
          "file": "\\test\\2_loginUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get jwt if correct credentials are passed",
              "fullTitle": "/api/user/login should get jwt if correct credentials are passed",
              "timedOut": false,
              "duration": 324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ email: user.email, password: user.password })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\"_id\", \"token\");\n    expect(res.body.user.token).to.have.string(\"Bearer\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "e4f55615-284b-453c-b28a-b952d5a4aa5f",
              "parentUUID": "54e6c334-0c6e-40f8-99e4-fae3626beb2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get jwt if wrong credentials is passed",
              "fullTitle": "/api/user/login should not get jwt if wrong credentials is passed",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ email: \"asdasd\", password: user.password })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "b782e386-6000-4e07-8d11-31790e0ef58e",
              "parentUUID": "54e6c334-0c6e-40f8-99e4-fae3626beb2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get jwt if no email is passed",
              "fullTitle": "/api/user/login should not get jwt if no email is passed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ password: user.password })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"email\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "6e0a14f3-e5c5-4307-840a-e597b8dd3969",
              "parentUUID": "54e6c334-0c6e-40f8-99e4-fae3626beb2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get jwt if no password is passed",
              "fullTitle": "/api/user/login should not get jwt if no password is passed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ email: user.email })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"password\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "dcb94ea9-8d35-4211-a201-830f3a3f390c",
              "parentUUID": "54e6c334-0c6e-40f8-99e4-fae3626beb2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get jwt if user not activated",
              "fullTitle": "/api/user/login should not get jwt if user not activated",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(1),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ email: user.email, password: user.password })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Account not activated\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "803f0d6a-8005-47ba-85c7-d91d988aa3bb",
              "parentUUID": "54e6c334-0c6e-40f8-99e4-fae3626beb2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4f55615-284b-453c-b28a-b952d5a4aa5f",
            "b782e386-6000-4e07-8d11-31790e0ef58e",
            "6e0a14f3-e5c5-4307-840a-e597b8dd3969",
            "dcb94ea9-8d35-4211-a201-830f3a3f390c",
            "803f0d6a-8005-47ba-85c7-d91d988aa3bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 565,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7891361a-9341-49c9-a14e-baa2bdcc1bb5",
          "title": "/api/user/getUserData",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\3_getUserData.test.js",
          "file": "\\test\\3_getUserData.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting jwt",
              "fullTitle": "/api/user/getUserData getting jwt",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    const token = jwt.sign(\n      {\n        email: user.email,\n        userId: _id,\n        username: user.username,\n      },\n      process.env.JWT_KEY,\n      {\n        expiresIn: \"30m\",\n      }\n    );\n    tokenJWT = \"Bearer \" + token;\n    done();\n  });",
              "err": {},
              "uuid": "0cbce6ba-be19-4d31-87bf-c635b00a5f28",
              "parentUUID": "7891361a-9341-49c9-a14e-baa2bdcc1bb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user data if jwt is passed and profilePage parameters is true",
              "fullTitle": "/api/user/getUserData should return user data if jwt is passed and profilePage parameters is true",
              "timedOut": false,
              "duration": 242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, userProfile: false })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\n      \"_id\",\n      \"firstName\",\n      \"lastName\",\n      \"username\",\n      \"email\",\n      \"bio\",\n      \"profilePicture\",\n      \"followings\",\n      \"followers\",\n      \"followingIds\",\n      \"postLikes\",\n      \"commentLikes\",\n      \"commentReplyLikes\",\n      \"allNotifications\",\n      \"messagesCount\",\n      \"notificationsCount\",\n      \"posts\",\n      \"postsCount\"\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "28ee1204-47b4-4ae5-9b46-764f1c2092a4",
              "parentUUID": "7891361a-9341-49c9-a14e-baa2bdcc1bb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user data if jwt is passed and userProfile parameters is true",
              "fullTitle": "/api/user/getUserData should return user data if jwt is passed and userProfile parameters is true",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: false, userProfile: true })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\n      \"_id\",\n      \"firstName\",\n      \"lastName\",\n      \"username\",\n      \"profilePicture\",\n      \"followingIds\",\n      \"postLikes\",\n      \"commentLikes\",\n      \"commentReplyLikes\",\n      \"allNotifications\",\n      \"messagesCount\",\n      \"notificationsCount\",\n      \"postsCount\"\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "d04f595c-41fd-4b39-bbea-2f5d7e77e33b",
              "parentUUID": "7891361a-9341-49c9-a14e-baa2bdcc1bb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return user data if parameters are not passed",
              "fullTitle": "/api/user/getUserData should not return user data if parameters are not passed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"profilePage\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "20791f06-1b63-400c-b6c3-589dd01fda8f",
              "parentUUID": "7891361a-9341-49c9-a14e-baa2bdcc1bb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return user data if profilePage is not boolean",
              "fullTitle": "/api/user/getUserData should not return user data if profilePage is not boolean",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: \"asd\", userProfile: \"asd\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"profilePage\" must be a boolean');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "fa468e47-10b2-4287-b09b-27753fd9036f",
              "parentUUID": "7891361a-9341-49c9-a14e-baa2bdcc1bb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return user data if userProfile is not boolean",
              "fullTitle": "/api/user/getUserData should not return user data if userProfile is not boolean",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, userProfile: \"asd\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"userProfile\" must be a boolean');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "53b2a23d-a9ec-4c85-aefb-3b5d636c4dab",
              "parentUUID": "7891361a-9341-49c9-a14e-baa2bdcc1bb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return user data if jwt is not passed",
              "fullTitle": "/api/user/getUserData should not return user data if jwt is not passed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .send({ initialFetch: true })\n  .expect(401)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Invalid token\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "a3fdac0d-ed21-4af3-a105-d744c7760473",
              "parentUUID": "7891361a-9341-49c9-a14e-baa2bdcc1bb5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0cbce6ba-be19-4d31-87bf-c635b00a5f28",
            "28ee1204-47b4-4ae5-9b46-764f1c2092a4",
            "d04f595c-41fd-4b39-bbea-2f5d7e77e33b",
            "20791f06-1b63-400c-b6c3-589dd01fda8f",
            "fa468e47-10b2-4287-b09b-27753fd9036f",
            "53b2a23d-a9ec-4c85-aefb-3b5d636c4dab",
            "a3fdac0d-ed21-4af3-a105-d744c7760473"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 498,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "75dcf6a0-a1a7-45ec-9d57-baaff3fce586",
          "title": "/api/user/getNewUsers",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\4_getNewUsers.test.js",
          "file": "\\test\\4_getNewUsers.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting _id",
              "fullTitle": "/api/user/getNewUsers getting _id",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    userId = _id;\n    done();\n  });",
              "err": {},
              "uuid": "fa60b3d5-b589-429a-ab90-70d5bc62acd7",
              "parentUUID": "75dcf6a0-a1a7-45ec-9d57-baaff3fce586",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return new users",
              "fullTitle": "/api/user/getNewUsers should return new users",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getNewUsers\")\n  .send({ initialFetch: true })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"usersCount\", \"users\");\n    expect(res.body.users).to.be.an(\"array\");\n    expect(res.body.users).to.have.lengthOf(2);\n    expect(res.body).to.have.nested.property(\"users[0]._id\");\n    expect(res.body).to.have.nested.property(\"users[0].date\");\n    expect(res.body).to.have.nested.property(\"users[0].profilePicture\");\n    expect(res.body).to.have.nested.property(\"users[0].username\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "ebd01808-0f73-4a0a-8bd2-be8f36481c8a",
              "parentUUID": "75dcf6a0-a1a7-45ec-9d57-baaff3fce586",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require lastId if initialFetch is false",
              "fullTitle": "/api/user/getNewUsers should require lastId if initialFetch is false",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getNewUsers\")\n  .send({ initialFetch: false })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"lastId\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "06529476-c57d-476b-a0a0-86e5c22214dc",
              "parentUUID": "75dcf6a0-a1a7-45ec-9d57-baaff3fce586",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user after first one",
              "fullTitle": "/api/user/getNewUsers should return user after first one",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getNewUsers\")\n  .send({ initialFetch: false, lastId: userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"users\");\n    expect(res.body.users).to.be.an(\"array\");\n    expect(res.body.users).to.have.lengthOf(1);\n    expect(res.body).to.have.nested.property(\"users[0]._id\");\n    expect(res.body).to.have.nested.property(\"users[0].date\");\n    expect(res.body).to.have.nested.property(\"users[0].profilePicture\");\n    expect(res.body).to.have.nested.property(\"users[0].username\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "840773fe-272b-4fb6-b723-66c3437c5d6e",
              "parentUUID": "75dcf6a0-a1a7-45ec-9d57-baaff3fce586",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa60b3d5-b589-429a-ab90-70d5bc62acd7",
            "ebd01808-0f73-4a0a-8bd2-be8f36481c8a",
            "06529476-c57d-476b-a0a0-86e5c22214dc",
            "840773fe-272b-4fb6-b723-66c3437c5d6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 251,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "762466a1-79e5-486a-88f0-c96275ab5be7",
          "title": "/api/user/getUserProfileData",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\5_getUserProfileData.test.js",
          "file": "\\test\\5_getUserProfileData.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting jwt",
              "fullTitle": "/api/user/getUserProfileData getting jwt",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    const token = jwt.sign(\n      {\n        email: user.email,\n        userId: _id,\n        username: user.username,\n      },\n      process.env.JWT_KEY,\n      {\n        expiresIn: \"30m\",\n      }\n    );\n    tokenJWT = \"Bearer \" + token;\n    done();\n  });",
              "err": {},
              "uuid": "26bc6b64-a950-4d4b-9937-52b19a22c993",
              "parentUUID": "762466a1-79e5-486a-88f0-c96275ab5be7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return data if jwt is passed and profilePage parameters is true",
              "fullTitle": "/api/user/getUserProfileData should return data if jwt is passed and profilePage parameters is true",
              "timedOut": false,
              "duration": 295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(1),\n};\nrequest(app)\n  .post(\"/api/user/getProfilePageData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, username: user.username })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\n      \"_id\",\n      \"bio\",\n      \"firstName\",\n      \"followers\",\n      \"followings\",\n      \"lastName\",\n      \"posts\",\n      \"postsCount\",\n      \"profilePicture\",\n      \"username\"\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "a22d355c-0af6-449c-b714-1a39557c829b",
              "parentUUID": "762466a1-79e5-486a-88f0-c96275ab5be7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return if user requests its profile",
              "fullTitle": "/api/user/getUserProfileData should return if user requests its profile",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getProfilePageData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, username: user.username })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\"loggedInUser\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "c3008575-9c3d-4444-9b16-101fb0700d4b",
              "parentUUID": "762466a1-79e5-486a-88f0-c96275ab5be7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return if jwt not passed",
              "fullTitle": "/api/user/getUserProfileData should not return if jwt not passed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getProfilePageData\")\n  .send({ profilePage: true, username: user.username })\n  .expect(401)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Invalid token\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "defd52e1-c07e-4cd0-8ab9-543d1cd1a84f",
              "parentUUID": "762466a1-79e5-486a-88f0-c96275ab5be7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return if username not passed",
              "fullTitle": "/api/user/getUserProfileData should not return if username not passed",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getProfilePageData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"username\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "4fb038d2-9367-4560-b745-5c686e7793c3",
              "parentUUID": "762466a1-79e5-486a-88f0-c96275ab5be7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return if username not valid",
              "fullTitle": "/api/user/getUserProfileData should not return if username not valid",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getProfilePageData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, username: \"123123\" })\n  .expect(404)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"User not found\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "db1a65cf-1af5-4b86-a388-e9609a164d0f",
              "parentUUID": "762466a1-79e5-486a-88f0-c96275ab5be7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26bc6b64-a950-4d4b-9937-52b19a22c993",
            "a22d355c-0af6-449c-b714-1a39557c829b",
            "c3008575-9c3d-4444-9b16-101fb0700d4b",
            "defd52e1-c07e-4cd0-8ab9-543d1cd1a84f",
            "4fb038d2-9367-4560-b745-5c686e7793c3",
            "db1a65cf-1af5-4b86-a388-e9609a164d0f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 469,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
          "title": "/api/user/getUserProfileData",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\6_followUser.test.js",
          "file": "\\test\\6_followUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting jwt",
              "fullTitle": "/api/user/getUserProfileData getting jwt",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    const token = jwt.sign(\n      {\n        email: user.email,\n        userId: _id,\n        username: user.username,\n      },\n      process.env.JWT_KEY,\n      {\n        expiresIn: \"30m\",\n      }\n    );\n    userId1 = _id;\n    tokenJWT = \"Bearer \" + token;\n    User.findOne({ username: getUser(1).username }).then(({ _id }) => {\n      userId = _id;\n      done();\n    });\n  });",
              "err": {},
              "uuid": "8cd9b8f0-b13d-46f1-aef8-bb3f01901e93",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should follow",
              "fullTitle": "/api/user/getUserProfileData should follow",
              "timedOut": false,
              "duration": 251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/followUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"userId\", \"action\");\n    expect(res.body.action).to.equal(\"followed\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "94bfaf31-5284-455e-8b37-c4c47d7b1dfb",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not follow itself",
              "fullTitle": "/api/user/getUserProfileData should not follow itself",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/followUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId1 })\n  .expect(403)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Failed to follow\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "179550ff-1cd2-48a1-82bb-b47bac82a6b5",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should modify right documents when followed",
              "fullTitle": "/api/user/getUserProfileData should modify right documents when followed",
              "timedOut": false,
              "duration": 296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const room = await ChatRoom.find();\nexpect(room).to.have.lengthOf(1);\nexpect(room[0].members).to.have.members([userId, userId1]);\nexpect(room[0].messages).to.equal(0);\nconst docF = await Following.findOne({ user: userId1 });\nexpect(docF.following).to.have.lengthOf(1);\nexpect(docF.following[0].user.toString()).to.have.equal(userId.toString());\nconst docN = await Notification.findOne({ receiver: userId });\nexpect(docN.sender.toString()).to.equal(userId1.toString());\nexpect(docN.receiver.toString()).to.equal(userId.toString());\nexpect(docN.type).to.equal(\"follow\");\nconst docFo = await Followers.findOne({ user: userId });\nexpect(docFo.followers).to.have.lengthOf(1);\nexpect(docFo.followers[0].user.toString()).to.have.equal(\n  userId1.toString()\n);",
              "err": {},
              "uuid": "4e3654a2-0a82-463d-b2c8-589ef063bc92",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followers of user 1",
              "fullTitle": "/api/user/getUserProfileData should get followers of user 1",
              "timedOut": false,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getUserProfileFollowers\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.users[0].followers).to.have.lengthOf(1);\n    expect(res.body.users[0].followers[0].user.username).to.equal(\n      user.username\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "bd020eea-4988-4793-8428-bbb531e13dfd",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followings of user 1",
              "fullTitle": "/api/user/getUserProfileData should get followings of user 1",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getUserProfileFollowings\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.users[0].following).to.have.lengthOf(0);\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "30f35888-1b46-470a-8f41-68a095f02b3a",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followers of user 2",
              "fullTitle": "/api/user/getUserProfileData should get followers of user 2",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getUserProfileFollowers\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId1 })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.users[0].followers).to.have.lengthOf(0);\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "97881d90-bf6e-4c48-8e0f-540dfdce139d",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followings of user 2",
              "fullTitle": "/api/user/getUserProfileData should get followings of user 2",
              "timedOut": false,
              "duration": 158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(1),\n};\nrequest(app)\n  .post(\"/api/user/getUserProfileFollowings\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId1 })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.users[0].following).to.have.lengthOf(1);\n    expect(res.body.users[0].following[0].user.username).to.equal(\n      user.username\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "a8247530-b5dc-488b-b8f3-abc249c32841",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should unfollow",
              "fullTitle": "/api/user/getUserProfileData should unfollow",
              "timedOut": false,
              "duration": 238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/followUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"userId\", \"action\");\n    expect(res.body.action).to.equal(\"unfollowed\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "17bec590-6067-45a8-93c2-8f95c80fb730",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should modify right documents when unfollowd",
              "fullTitle": "/api/user/getUserProfileData should modify right documents when unfollowd",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docF = await Following.findOne({ user: userId1 });\nexpect(docF.following).to.have.lengthOf(0);\nconst docFo = await Followers.findOne({ user: userId });\nexpect(docFo.followers).to.have.lengthOf(0);",
              "err": {},
              "uuid": "ee5453dc-3034-40d7-9d76-b761c3cdce12",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not follow non existing user",
              "fullTitle": "/api/user/getUserProfileData should not follow non existing user",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/followUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: fakeId })\n  .expect(404)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"User not found\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "bf8ccdb9-a62d-4d92-8c7c-71a828513241",
              "parentUUID": "0b11f516-c5ec-46b7-b27d-7974635a71e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8cd9b8f0-b13d-46f1-aef8-bb3f01901e93",
            "94bfaf31-5284-455e-8b37-c4c47d7b1dfb",
            "179550ff-1cd2-48a1-82bb-b47bac82a6b5",
            "4e3654a2-0a82-463d-b2c8-589ef063bc92",
            "bd020eea-4988-4793-8428-bbb531e13dfd",
            "30f35888-1b46-470a-8f41-68a095f02b3a",
            "97881d90-bf6e-4c48-8e0f-540dfdce139d",
            "a8247530-b5dc-488b-b8f3-abc249c32841",
            "17bec590-6067-45a8-93c2-8f95c80fb730",
            "ee5453dc-3034-40d7-9d76-b761c3cdce12",
            "bf8ccdb9-a62d-4d92-8c7c-71a828513241"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1722,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
          "title": "/api/user/updateUser",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\7_updateUser.test.js",
          "file": "\\test\\7_updateUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting jwt",
              "fullTitle": "/api/user/updateUser getting jwt",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    const token = jwt.sign(\n      {\n        email: user.email,\n        userId: _id,\n        username: user.username,\n      },\n      process.env.JWT_KEY,\n      {\n        expiresIn: \"30m\",\n      }\n    );\n    userId = _id;\n    tokenJWT = \"Bearer \" + token;\n    done();\n  });",
              "err": {},
              "uuid": "0ec53a3a-bf8e-43c9-88ee-1ba3c5b50738",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user",
              "fullTitle": "/api/user/updateUser should update user",
              "timedOut": false,
              "duration": 170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"user\", \"token\");\n    expect(res.body.user).to.have.all.keys(\n      \"_id\",\n      \"firstName\",\n      \"lastName\",\n      \"username\",\n      \"email\",\n      \"bio\"\n    );\n    expect(res.body.user.firstName).to.equal(user.firstName);\n    expect(res.body.user.lastName).to.equal(user.lastName);\n    expect(res.body.user.username).to.equal(user.username);\n    expect(res.body.user.email).to.equal(user.email);\n    expect(res.body.user.bio).to.equal(user.bio);\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "3407da61-7096-4a5b-b745-e8b94c138763",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if email exists",
              "fullTitle": "/api/user/updateUser should not update user if email exists",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: getUser(1).email,\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(409)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Email exists\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "ca42c497-813c-46ba-94d7-10158bda44fa",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if username exists",
              "fullTitle": "/api/user/updateUser should not update user if username exists",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: getUser(1).username,\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(409)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Username exists\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "f3adb25d-4b12-4a0c-891e-69125d5e3f2a",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if username is invalid",
              "fullTitle": "/api/user/updateUser should not update user if username is invalid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bob ross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "c8e4cca6-753f-40e4-bbe7-6af485d95eaa",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if email is invalid",
              "fullTitle": "/api/user/updateUser should not update user if email is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobrossbob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "fc947026-4078-4166-acd8-d592fa61600a",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if firstName is invalid",
              "fullTitle": "/api/user/updateUser should not update user if firstName is invalid",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"B o b\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "a118b486-06be-4a75-a44d-627e22626336",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if lastName is invalid",
              "fullTitle": "/api/user/updateUser should not update user if lastName is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"R os s\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "1efbce7f-de0a-4aaf-a8a4-f9b956e858bc",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if bio is too long",
              "fullTitle": "/api/user/updateUser should not update user if bio is too long",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"a\".repeat(300),\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\n      '\"bio\" length must be less than or equal to 250 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "29b19f08-0961-4308-b0c9-3c89b5d4a882",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have not updated user with previous tests",
              "fullTitle": "/api/user/updateUser should have not updated user with previous tests",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nUser.findById(userId).then(\n  ({ firstName, lastName, username, email, bio }) => {\n    expect(firstName).to.equal(user.firstName);\n    expect(lastName).to.equal(user.lastName);\n    expect(username).to.equal(user.username);\n    expect(email).to.equal(user.email);\n    expect(bio).to.equal(user.bio);\n    done();\n  }\n);",
              "err": {},
              "uuid": "5ad439d3-395d-4120-ad3e-593872878b6d",
              "parentUUID": "fed1b8b9-18e6-48d2-ab4a-f6aa96cb7c18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ec53a3a-bf8e-43c9-88ee-1ba3c5b50738",
            "3407da61-7096-4a5b-b745-e8b94c138763",
            "ca42c497-813c-46ba-94d7-10158bda44fa",
            "f3adb25d-4b12-4a0c-891e-69125d5e3f2a",
            "c8e4cca6-753f-40e4-bbe7-6af485d95eaa",
            "fc947026-4078-4166-acd8-d592fa61600a",
            "a118b486-06be-4a75-a44d-627e22626336",
            "1efbce7f-de0a-4aaf-a8a4-f9b956e858bc",
            "29b19f08-0961-4308-b0c9-3c89b5d4a882",
            "5ad439d3-395d-4120-ad3e-593872878b6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 530,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./testArtifact"
      },
      "version": "6.2.0"
    }
  }
}
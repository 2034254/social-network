{
  "stats": {
    "suites": 7,
    "tests": 70,
    "passes": 70,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-07T18:06:24.653Z",
    "end": "2023-12-07T18:06:32.634Z",
    "duration": 7981,
    "testsRegistered": 70,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "db1fdef6-6879-4ec4-b23b-ce3e456db208",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1184,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await dbHandler.closeDatabase();\nawait dbHandler.connect();\npopulate();",
          "err": {},
          "uuid": "ad70c029-ea60-4147-87de-6ef6b72979f4",
          "parentUUID": "db1fdef6-6879-4ec4-b23b-ce3e456db208",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 1001,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await dbHandler.clearDatabase();\nawait dbHandler.closeDatabase();",
          "err": {},
          "uuid": "bb0594f0-4f50-4ee8-9fcc-cc06091e4680",
          "parentUUID": "db1fdef6-6879-4ec4-b23b-ce3e456db208",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
          "title": "/api/user/signup",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\1_addUser.test.js",
          "file": "\\test\\1_addUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user",
              "fullTitle": "/api/user/signup should create user",
              "timedOut": false,
              "duration": 929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(201)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    if (process.env.ENABLE_SEND_EMAIL === \"true\") {\n      expect(res.body.message).to.equal(\"Verify your email address\");\n    } else {\n      expect(res.body.message).to.equal(\"Account created\");\n    }\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "cbe0fba8-7003-41d0-94d7-f671ab1fbe4e",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if documents in collections are created",
              "fullTitle": "/api/user/signup check if documents in collections are created",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.find({ username: user.username })\n  .select(\"_id\")\n  .then((user) => {\n    expect(user, \"only one user should be created\").to.have.lengthOf(1);\n    const a = Following.find({ user: user[0]._id });\n    const b = Followers.find({ user: user[0]._id });\n    Promise.all([a, b])\n      .then((documents) => {\n        const [doc1, doc2] = documents;\n        const userId = user[0]._id.toString();\n        const doc1UserId = doc1[0].user.toString();\n        const doc2UserId = doc2[0].user.toString();\n        expect(\n          doc1,\n          \"one document in Followers should be created\"\n        ).to.have.lengthOf(1);\n        expect(doc1UserId).to.equal(userId);\n        expect(\n          doc2,\n          \"one document in Followers should be created\"\n        ).to.have.lengthOf(1);\n        expect(doc2UserId).to.equal(userId);\n        done();\n      })\n      .catch((err) => done(err));\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "28a05546-36b9-46d0-81b1-3c7cfa3855bf",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username exists",
              "fullTitle": "/api/user/signup should not create user if username exists",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(409)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\"Username exists\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "41e2a5b8-b35e-4064-9576-92b3ec0a8253",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email exists",
              "fullTitle": "/api/user/signup should not create user if email exists",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"janedoe\" })\n  .expect(409)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\"Email exists\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "d805f866-ec01-46c6-8319-b9b1fea0d6c6",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username is invalid",
              "fullTitle": "/api/user/signup should not create user if username is invalid",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"john doe\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "c5ad4e8b-09f6-4637-bbe6-eb39f9ba2d0f",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username is invalid",
              "fullTitle": "/api/user/signup should not create user if username is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"john@doe\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "df4b2c0c-9c2d-4b6b-bbc0-dacb98e1c97b",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is invalid",
              "fullTitle": "/api/user/signup should not create user if email is invalid",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"janedoe.com\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "82feba73-991c-470f-a21f-cc1a8eb863f3",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is invalid",
              "fullTitle": "/api/user/signup should not create user if email is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"janedoe@com\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "f3aceecb-ac0e-4501-b0a4-baa4eb59d743",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is invalid",
              "fullTitle": "/api/user/signup should not create user if email is invalid",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"janedoecom\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "43579e75-de3d-45b9-9af8-43514ba6e594",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without firstName",
              "fullTitle": "/api/user/signup should not create user without firstName",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.firstName;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"firstName\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "71d78e38-1f17-45a2-81d4-202696428ba1",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without lastName",
              "fullTitle": "/api/user/signup should not create user without lastName",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.lastName;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"lastName\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "46175363-5391-4dac-96c9-2a1a6964c2e8",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without username",
              "fullTitle": "/api/user/signup should not create user without username",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.username;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"username\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "94dc8f84-4103-497b-9091-72ccf2a1b3e8",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without email",
              "fullTitle": "/api/user/signup should not create user without email",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.email;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"email\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "1844009d-8451-4bee-8302-eafbb5941b77",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without password",
              "fullTitle": "/api/user/signup should not create user without password",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.password;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"password\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "3fb8e24e-9e0d-4f38-9717-bccba338f50a",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user without retypepassword",
              "fullTitle": "/api/user/signup should not create user without retypepassword",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\ndelete user.retypepassword;\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send(user)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"retypepassword\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "e879aacf-3b1b-4e1b-824c-5a1594d7444b",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if firstname is empty",
              "fullTitle": "/api/user/signup should not create user if firstname is empty",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, firstName: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"firstName\" is not allowed to be empty'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "6674fc85-06ea-44a3-936f-cd66352e0f55",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if lastname is empty",
              "fullTitle": "/api/user/signup should not create user if lastname is empty",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, lastName: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"lastName\" is not allowed to be empty'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "2d51c45a-3f81-4b8e-8f5d-68856fa5648b",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username is empty",
              "fullTitle": "/api/user/signup should not create user if username is empty",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"username\" is not allowed to be empty'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "40c12118-a7f5-40b5-9d94-8cdb84899e55",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is empty",
              "fullTitle": "/api/user/signup should not create user if email is empty",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal('\"email\" is not allowed to be empty');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "cddd457b-603e-4fc7-a85f-5fd451911f35",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if password is empty",
              "fullTitle": "/api/user/signup should not create user if password is empty",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, password: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"password\" is not allowed to be empty'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "45de31e9-c088-4ff4-a526-67b2551b8a33",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if retypepassword is empty",
              "fullTitle": "/api/user/signup should not create user if retypepassword is empty",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, retypepassword: \"\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"retypepassword\" must be [ref:password]'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "06538e06-80e3-4cb6-a449-f12a49ac6b18",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if firstname is too long",
              "fullTitle": "/api/user/signup should not create user if firstname is too long",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, firstName: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"firstName\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "66614e6e-c6ef-4717-aa59-49301174d489",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if lastname is too long",
              "fullTitle": "/api/user/signup should not create user if lastname is too long",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, lastName: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"lastName\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "22b11536-9e73-4ac6-ba73-ceeaa7baa011",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if username is too long",
              "fullTitle": "/api/user/signup should not create user if username is too long",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, username: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"username\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "0bf27d36-8580-4345-9c74-1f9965e4d658",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if email is too long",
              "fullTitle": "/api/user/signup should not create user if email is too long",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, email: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"email\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "7c8d6ce3-171d-4724-803b-6bc8ab3d0dfd",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if password is too long",
              "fullTitle": "/api/user/signup should not create user if password is too long",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, password: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"password\" length must be less than or equal to 30 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "19029763-fdf6-49bf-8177-88d18e329c8d",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user if retypepassword is too long",
              "fullTitle": "/api/user/signup should not create user if retypepassword is too long",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/signup\")\n  .send({ ...user, retypepassword: \"a\".repeat(31) })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.property(\"message\");\n    expect(res.body.message).to.equal(\n      '\"retypepassword\" must be [ref:password]'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "0ffbc352-cea2-43e4-ab95-9125a38f6953",
              "parentUUID": "a4ea0e61-cf8e-43c7-914f-a985f3dcb12b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbe0fba8-7003-41d0-94d7-f671ab1fbe4e",
            "28a05546-36b9-46d0-81b1-3c7cfa3855bf",
            "41e2a5b8-b35e-4064-9576-92b3ec0a8253",
            "d805f866-ec01-46c6-8319-b9b1fea0d6c6",
            "c5ad4e8b-09f6-4637-bbe6-eb39f9ba2d0f",
            "df4b2c0c-9c2d-4b6b-bbc0-dacb98e1c97b",
            "82feba73-991c-470f-a21f-cc1a8eb863f3",
            "f3aceecb-ac0e-4501-b0a4-baa4eb59d743",
            "43579e75-de3d-45b9-9af8-43514ba6e594",
            "71d78e38-1f17-45a2-81d4-202696428ba1",
            "46175363-5391-4dac-96c9-2a1a6964c2e8",
            "94dc8f84-4103-497b-9091-72ccf2a1b3e8",
            "1844009d-8451-4bee-8302-eafbb5941b77",
            "3fb8e24e-9e0d-4f38-9717-bccba338f50a",
            "e879aacf-3b1b-4e1b-824c-5a1594d7444b",
            "6674fc85-06ea-44a3-936f-cd66352e0f55",
            "2d51c45a-3f81-4b8e-8f5d-68856fa5648b",
            "40c12118-a7f5-40b5-9d94-8cdb84899e55",
            "cddd457b-603e-4fc7-a85f-5fd451911f35",
            "45de31e9-c088-4ff4-a526-67b2551b8a33",
            "06538e06-80e3-4cb6-a449-f12a49ac6b18",
            "66614e6e-c6ef-4717-aa59-49301174d489",
            "22b11536-9e73-4ac6-ba73-ceeaa7baa011",
            "0bf27d36-8580-4345-9c74-1f9965e4d658",
            "7c8d6ce3-171d-4724-803b-6bc8ab3d0dfd",
            "19029763-fdf6-49bf-8177-88d18e329c8d",
            "0ffbc352-cea2-43e4-ab95-9125a38f6953"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1436,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6090e6a0-e391-4d90-ba69-1b3f79bbc527",
          "title": "/api/user/login",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\2_loginUser.test.js",
          "file": "\\test\\2_loginUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get jwt if correct credentials are passed",
              "fullTitle": "/api/user/login should get jwt if correct credentials are passed",
              "timedOut": false,
              "duration": 384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ email: user.email, password: user.password })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\"_id\", \"token\");\n    expect(res.body.user.token).to.have.string(\"Bearer\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "b1f1c791-2010-47af-90d3-666b8c39bad8",
              "parentUUID": "6090e6a0-e391-4d90-ba69-1b3f79bbc527",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get jwt if wrong credentials is passed",
              "fullTitle": "/api/user/login should not get jwt if wrong credentials is passed",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ email: \"asdasd\", password: user.password })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "d672e5de-394b-4772-9a09-ca328a78292b",
              "parentUUID": "6090e6a0-e391-4d90-ba69-1b3f79bbc527",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get jwt if no email is passed",
              "fullTitle": "/api/user/login should not get jwt if no email is passed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ password: user.password })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"email\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "0c3e101c-e6db-4dcd-9e1c-6e92c6bba2e0",
              "parentUUID": "6090e6a0-e391-4d90-ba69-1b3f79bbc527",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get jwt if no password is passed",
              "fullTitle": "/api/user/login should not get jwt if no password is passed",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ email: user.email })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"password\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "c68d91c6-0c81-4f53-b454-ed100a32e62d",
              "parentUUID": "6090e6a0-e391-4d90-ba69-1b3f79bbc527",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get jwt if user not activated",
              "fullTitle": "/api/user/login should not get jwt if user not activated",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(1),\n};\nrequest(app)\n  .post(\"/api/user/login\")\n  .send({ email: user.email, password: user.password })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Account not activated\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "e485f765-4638-4f20-bd41-47d7826837e3",
              "parentUUID": "6090e6a0-e391-4d90-ba69-1b3f79bbc527",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1f1c791-2010-47af-90d3-666b8c39bad8",
            "d672e5de-394b-4772-9a09-ca328a78292b",
            "0c3e101c-e6db-4dcd-9e1c-6e92c6bba2e0",
            "c68d91c6-0c81-4f53-b454-ed100a32e62d",
            "e485f765-4638-4f20-bd41-47d7826837e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 670,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "baa75284-1f17-4f6c-aa4d-9293091477f7",
          "title": "/api/user/getUserData",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\3_getUserData.test.js",
          "file": "\\test\\3_getUserData.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting jwt",
              "fullTitle": "/api/user/getUserData getting jwt",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    const token = jwt.sign(\n      {\n        email: user.email,\n        userId: _id,\n        username: user.username,\n      },\n      process.env.JWT_KEY,\n      {\n        expiresIn: \"30m\",\n      }\n    );\n    tokenJWT = \"Bearer \" + token;\n    done();\n  });",
              "err": {},
              "uuid": "da89c82b-be65-400d-a453-30156a82ac2d",
              "parentUUID": "baa75284-1f17-4f6c-aa4d-9293091477f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user data if jwt is passed and profilePage parameters is true",
              "fullTitle": "/api/user/getUserData should return user data if jwt is passed and profilePage parameters is true",
              "timedOut": false,
              "duration": 242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, userProfile: false })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\n      \"_id\",\n      \"firstName\",\n      \"lastName\",\n      \"username\",\n      \"email\",\n      \"bio\",\n      \"profilePicture\",\n      \"followings\",\n      \"followers\",\n      \"followingIds\",\n      \"postLikes\",\n      \"commentLikes\",\n      \"commentReplyLikes\",\n      \"allNotifications\",\n      \"messagesCount\",\n      \"notificationsCount\",\n      \"posts\",\n      \"postsCount\"\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "75a44903-0c84-4774-a7ff-b9b214090f38",
              "parentUUID": "baa75284-1f17-4f6c-aa4d-9293091477f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user data if jwt is passed and userProfile parameters is true",
              "fullTitle": "/api/user/getUserData should return user data if jwt is passed and userProfile parameters is true",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: false, userProfile: true })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\n      \"_id\",\n      \"firstName\",\n      \"lastName\",\n      \"username\",\n      \"profilePicture\",\n      \"followingIds\",\n      \"postLikes\",\n      \"commentLikes\",\n      \"commentReplyLikes\",\n      \"allNotifications\",\n      \"messagesCount\",\n      \"notificationsCount\",\n      \"postsCount\"\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "8839e0d9-595b-4cf1-a082-c3c387d9b777",
              "parentUUID": "baa75284-1f17-4f6c-aa4d-9293091477f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return user data if parameters are not passed",
              "fullTitle": "/api/user/getUserData should not return user data if parameters are not passed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"profilePage\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "ce68884b-bffd-4ed9-bb58-5bcf11e341c4",
              "parentUUID": "baa75284-1f17-4f6c-aa4d-9293091477f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return user data if profilePage is not boolean",
              "fullTitle": "/api/user/getUserData should not return user data if profilePage is not boolean",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: \"asd\", userProfile: \"asd\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"profilePage\" must be a boolean');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "52d80ad8-0046-49c2-b3bb-ae58cae28a63",
              "parentUUID": "baa75284-1f17-4f6c-aa4d-9293091477f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return user data if userProfile is not boolean",
              "fullTitle": "/api/user/getUserData should not return user data if userProfile is not boolean",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, userProfile: \"asd\" })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"userProfile\" must be a boolean');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "af10351b-c29f-4765-a1a6-f8149e6f6012",
              "parentUUID": "baa75284-1f17-4f6c-aa4d-9293091477f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return user data if jwt is not passed",
              "fullTitle": "/api/user/getUserData should not return user data if jwt is not passed",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getUserData\")\n  .send({ initialFetch: true })\n  .expect(401)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Invalid token\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "6e545a39-0583-4a7e-9010-cf45116c0d99",
              "parentUUID": "baa75284-1f17-4f6c-aa4d-9293091477f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da89c82b-be65-400d-a453-30156a82ac2d",
            "75a44903-0c84-4774-a7ff-b9b214090f38",
            "8839e0d9-595b-4cf1-a082-c3c387d9b777",
            "ce68884b-bffd-4ed9-bb58-5bcf11e341c4",
            "52d80ad8-0046-49c2-b3bb-ae58cae28a63",
            "af10351b-c29f-4765-a1a6-f8149e6f6012",
            "6e545a39-0583-4a7e-9010-cf45116c0d99"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 495,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "50296088-3ad1-4e07-8c29-3ebc51b551c7",
          "title": "/api/user/getNewUsers",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\4_getNewUsers.test.js",
          "file": "\\test\\4_getNewUsers.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting _id",
              "fullTitle": "/api/user/getNewUsers getting _id",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    userId = _id;\n    done();\n  });",
              "err": {},
              "uuid": "443ac894-6934-423b-b1f5-73513858107d",
              "parentUUID": "50296088-3ad1-4e07-8c29-3ebc51b551c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return new users",
              "fullTitle": "/api/user/getNewUsers should return new users",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getNewUsers\")\n  .send({ initialFetch: true })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"usersCount\", \"users\");\n    expect(res.body.users).to.be.an(\"array\");\n    expect(res.body.users).to.have.lengthOf(2);\n    expect(res.body).to.have.nested.property(\"users[0]._id\");\n    expect(res.body).to.have.nested.property(\"users[0].date\");\n    expect(res.body).to.have.nested.property(\"users[0].profilePicture\");\n    expect(res.body).to.have.nested.property(\"users[0].username\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "40f72d54-58e9-4c35-8d70-e4be59d470d4",
              "parentUUID": "50296088-3ad1-4e07-8c29-3ebc51b551c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require lastId if initialFetch is false",
              "fullTitle": "/api/user/getNewUsers should require lastId if initialFetch is false",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getNewUsers\")\n  .send({ initialFetch: false })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"lastId\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "27e70b88-08d2-4eb4-ba67-e440cb7d0370",
              "parentUUID": "50296088-3ad1-4e07-8c29-3ebc51b551c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user after first one",
              "fullTitle": "/api/user/getNewUsers should return user after first one",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getNewUsers\")\n  .send({ initialFetch: false, lastId: userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"users\");\n    expect(res.body.users).to.be.an(\"array\");\n    expect(res.body.users).to.have.lengthOf(1);\n    expect(res.body).to.have.nested.property(\"users[0]._id\");\n    expect(res.body).to.have.nested.property(\"users[0].date\");\n    expect(res.body).to.have.nested.property(\"users[0].profilePicture\");\n    expect(res.body).to.have.nested.property(\"users[0].username\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "255a4f0f-1213-4ff5-84b5-9ad3f6bf8d82",
              "parentUUID": "50296088-3ad1-4e07-8c29-3ebc51b551c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "443ac894-6934-423b-b1f5-73513858107d",
            "40f72d54-58e9-4c35-8d70-e4be59d470d4",
            "27e70b88-08d2-4eb4-ba67-e440cb7d0370",
            "255a4f0f-1213-4ff5-84b5-9ad3f6bf8d82"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 245,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "047a37b6-b6b9-4e79-87ac-0dd33aa149d8",
          "title": "/api/user/getUserProfileData",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\5_getUserProfileData.test.js",
          "file": "\\test\\5_getUserProfileData.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting jwt",
              "fullTitle": "/api/user/getUserProfileData getting jwt",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    const token = jwt.sign(\n      {\n        email: user.email,\n        userId: _id,\n        username: user.username,\n      },\n      process.env.JWT_KEY,\n      {\n        expiresIn: \"30m\",\n      }\n    );\n    tokenJWT = \"Bearer \" + token;\n    done();\n  });",
              "err": {},
              "uuid": "e4fe8a42-7e7b-48f8-909b-b5c7a58b2845",
              "parentUUID": "047a37b6-b6b9-4e79-87ac-0dd33aa149d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return data if jwt is passed and profilePage parameters is true",
              "fullTitle": "/api/user/getUserProfileData should return data if jwt is passed and profilePage parameters is true",
              "timedOut": false,
              "duration": 248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(1),\n};\nrequest(app)\n  .post(\"/api/user/getProfilePageData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, username: user.username })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\n      \"_id\",\n      \"bio\",\n      \"firstName\",\n      \"followers\",\n      \"followings\",\n      \"lastName\",\n      \"posts\",\n      \"postsCount\",\n      \"profilePicture\",\n      \"username\"\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "bc714857-2864-48d7-99f2-8734a2dab0ae",
              "parentUUID": "047a37b6-b6b9-4e79-87ac-0dd33aa149d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return if user requests its profile",
              "fullTitle": "/api/user/getUserProfileData should return if user requests its profile",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getProfilePageData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, username: user.username })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.user).to.have.all.keys(\"loggedInUser\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "e4afe1db-827d-4f9d-ad3c-f47be73ccde2",
              "parentUUID": "047a37b6-b6b9-4e79-87ac-0dd33aa149d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return if jwt not passed",
              "fullTitle": "/api/user/getUserProfileData should not return if jwt not passed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getProfilePageData\")\n  .send({ profilePage: true, username: user.username })\n  .expect(401)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Invalid token\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "68657923-ce6b-4a11-abda-216d356395fe",
              "parentUUID": "047a37b6-b6b9-4e79-87ac-0dd33aa149d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return if username not passed",
              "fullTitle": "/api/user/getUserProfileData should not return if username not passed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getProfilePageData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal('\"username\" is required');\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "31d5f364-e5e6-47e9-bbc7-3a7d1e7e1f07",
              "parentUUID": "047a37b6-b6b9-4e79-87ac-0dd33aa149d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return if username not valid",
              "fullTitle": "/api/user/getUserProfileData should not return if username not valid",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/getProfilePageData\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ profilePage: true, username: \"123123\" })\n  .expect(404)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"User not found\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "db9be6e8-d064-4164-9167-2468fa653495",
              "parentUUID": "047a37b6-b6b9-4e79-87ac-0dd33aa149d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4fe8a42-7e7b-48f8-909b-b5c7a58b2845",
            "bc714857-2864-48d7-99f2-8734a2dab0ae",
            "e4afe1db-827d-4f9d-ad3c-f47be73ccde2",
            "68657923-ce6b-4a11-abda-216d356395fe",
            "31d5f364-e5e6-47e9-bbc7-3a7d1e7e1f07",
            "db9be6e8-d064-4164-9167-2468fa653495"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fc9cc432-e71e-463f-a604-9a9a92de10df",
          "title": "/api/user/getUserProfileData",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\6_followUser.test.js",
          "file": "\\test\\6_followUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting jwt",
              "fullTitle": "/api/user/getUserProfileData getting jwt",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    const token = jwt.sign(\n      {\n        email: user.email,\n        userId: _id,\n        username: user.username,\n      },\n      process.env.JWT_KEY,\n      {\n        expiresIn: \"30m\",\n      }\n    );\n    userId1 = _id;\n    tokenJWT = \"Bearer \" + token;\n    User.findOne({ username: getUser(1).username }).then(({ _id }) => {\n      userId = _id;\n      done();\n    });\n  });",
              "err": {},
              "uuid": "9574ac92-7b21-4cdc-b37e-e5dd5376cfd4",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should follow",
              "fullTitle": "/api/user/getUserProfileData should follow",
              "timedOut": false,
              "duration": 272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/followUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"userId\", \"action\");\n    expect(res.body.action).to.equal(\"followed\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "2b084ac3-0cd1-43a9-bfe1-50c60aa57790",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not follow itself",
              "fullTitle": "/api/user/getUserProfileData should not follow itself",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/followUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId1 })\n  .expect(403)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Failed to follow\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "436b268b-f449-4776-91e5-35a3630caa3f",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should modify right documents when followed",
              "fullTitle": "/api/user/getUserProfileData should modify right documents when followed",
              "timedOut": false,
              "duration": 334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const room = await ChatRoom.find();\nexpect(room).to.have.lengthOf(1);\nexpect(room[0].members).to.have.members([userId, userId1]);\nexpect(room[0].messages).to.equal(0);\nconst docF = await Following.findOne({ user: userId1 });\nexpect(docF.following).to.have.lengthOf(1);\nexpect(docF.following[0].user.toString()).to.have.equal(userId.toString());\nconst docN = await Notification.findOne({ receiver: userId });\nexpect(docN.sender.toString()).to.equal(userId1.toString());\nexpect(docN.receiver.toString()).to.equal(userId.toString());\nexpect(docN.type).to.equal(\"follow\");\nconst docFo = await Followers.findOne({ user: userId });\nexpect(docFo.followers).to.have.lengthOf(1);\nexpect(docFo.followers[0].user.toString()).to.have.equal(\n  userId1.toString()\n);",
              "err": {},
              "uuid": "9d317dbf-53f8-4e34-9669-956baa7a61d3",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followers of user 1",
              "fullTitle": "/api/user/getUserProfileData should get followers of user 1",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getUserProfileFollowers\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.users[0].followers).to.have.lengthOf(1);\n    expect(res.body.users[0].followers[0].user.username).to.equal(\n      user.username\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "ff23fc3d-2154-49be-b28d-1bcbd2221f54",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followings of user 1",
              "fullTitle": "/api/user/getUserProfileData should get followings of user 1",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getUserProfileFollowings\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.users[0].following).to.have.lengthOf(0);\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "ba593933-5f7f-41ab-87af-7ca5dfb19c80",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followers of user 2",
              "fullTitle": "/api/user/getUserProfileData should get followers of user 2",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nrequest(app)\n  .post(\"/api/user/getUserProfileFollowers\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId1 })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.users[0].followers).to.have.lengthOf(0);\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "011cde67-96bc-4500-ae64-11d703848832",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followings of user 2",
              "fullTitle": "/api/user/getUserProfileData should get followings of user 2",
              "timedOut": false,
              "duration": 164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(1),\n};\nrequest(app)\n  .post(\"/api/user/getUserProfileFollowings\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: userId1 })\n  .expect(200)\n  .then((res) => {\n    expect(res.body.users[0].following).to.have.lengthOf(1);\n    expect(res.body.users[0].following[0].user.username).to.equal(\n      user.username\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "511d1391-12f7-44d6-9a60-141cc6d48127",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should unfollow",
              "fullTitle": "/api/user/getUserProfileData should unfollow",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/followUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"userId\", \"action\");\n    expect(res.body.action).to.equal(\"unfollowed\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "9427d7c3-25e2-4e26-887a-444c12aa2fd9",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should modify right documents when unfollowd",
              "fullTitle": "/api/user/getUserProfileData should modify right documents when unfollowd",
              "timedOut": false,
              "duration": 170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const docF = await Following.findOne({ user: userId1 });\nexpect(docF.following).to.have.lengthOf(0);\nconst docFo = await Followers.findOne({ user: userId });\nexpect(docFo.followers).to.have.lengthOf(0);",
              "err": {},
              "uuid": "1a7b207c-db6a-4ed5-aac9-ee66de5cb838",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not follow non existing user",
              "fullTitle": "/api/user/getUserProfileData should not follow non existing user",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post(\"/api/user/followUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({ userId: fakeId })\n  .expect(404)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"User not found\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "6683c3dd-d460-48be-b008-63034f8d31c9",
              "parentUUID": "fc9cc432-e71e-463f-a604-9a9a92de10df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9574ac92-7b21-4cdc-b37e-e5dd5376cfd4",
            "2b084ac3-0cd1-43a9-bfe1-50c60aa57790",
            "436b268b-f449-4776-91e5-35a3630caa3f",
            "9d317dbf-53f8-4e34-9669-956baa7a61d3",
            "ff23fc3d-2154-49be-b28d-1bcbd2221f54",
            "ba593933-5f7f-41ab-87af-7ca5dfb19c80",
            "011cde67-96bc-4500-ae64-11d703848832",
            "511d1391-12f7-44d6-9a60-141cc6d48127",
            "9427d7c3-25e2-4e26-887a-444c12aa2fd9",
            "1a7b207c-db6a-4ed5-aac9-ee66de5cb838",
            "6683c3dd-d460-48be-b008-63034f8d31c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1819,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f217dccf-b76d-41d9-ac19-04169bbf1226",
          "title": "/api/user/updateUser",
          "fullFile": "C:\\Users\\adm1\\Documents\\Semester5\\Transactional Application 2\\Final-Project\\social-network\\test\\7_updateUser.test.js",
          "file": "\\test\\7_updateUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getting jwt",
              "fullTitle": "/api/user/updateUser getting jwt",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  ...getUser(0),\n};\nUser.findOne({ username: user.username })\n  .select(\"_id\")\n  .then(({ _id }) => {\n    const token = jwt.sign(\n      {\n        email: user.email,\n        userId: _id,\n        username: user.username,\n      },\n      process.env.JWT_KEY,\n      {\n        expiresIn: \"30m\",\n      }\n    );\n    userId = _id;\n    tokenJWT = \"Bearer \" + token;\n    done();\n  });",
              "err": {},
              "uuid": "c9952571-f564-45fa-8bc1-9346031e79da",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user",
              "fullTitle": "/api/user/updateUser should update user",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(200)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"user\", \"token\");\n    expect(res.body.user).to.have.all.keys(\n      \"_id\",\n      \"firstName\",\n      \"lastName\",\n      \"username\",\n      \"email\",\n      \"bio\"\n    );\n    expect(res.body.user.firstName).to.equal(user.firstName);\n    expect(res.body.user.lastName).to.equal(user.lastName);\n    expect(res.body.user.username).to.equal(user.username);\n    expect(res.body.user.email).to.equal(user.email);\n    expect(res.body.user.bio).to.equal(user.bio);\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "4ac2b584-2ca8-4bc3-966a-d1f06f59c74e",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if email exists",
              "fullTitle": "/api/user/updateUser should not update user if email exists",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: getUser(1).email,\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(409)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Email exists\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "9686b618-c06e-4627-a911-f72b5be5a8fc",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if username exists",
              "fullTitle": "/api/user/updateUser should not update user if username exists",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: getUser(1).username,\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(409)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\"Username exists\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "4a12f8f7-f7c3-4bd3-94bd-175c196ea23a",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if username is invalid",
              "fullTitle": "/api/user/updateUser should not update user if username is invalid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bob ross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "8e0ee5d7-7733-4c24-8edb-bdbb56478af1",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if email is invalid",
              "fullTitle": "/api/user/updateUser should not update user if email is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobrossbob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "2cf68f36-6fdb-483a-b27e-e6cd3395e417",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if firstName is invalid",
              "fullTitle": "/api/user/updateUser should not update user if firstName is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"B o b\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "1d346724-ca20-4485-850a-2933d65054e5",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if lastName is invalid",
              "fullTitle": "/api/user/updateUser should not update user if lastName is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"R os s\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "e9d8e218-86ec-446d-9e5f-0f1c6101673d",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user if bio is too long",
              "fullTitle": "/api/user/updateUser should not update user if bio is too long",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"a\".repeat(300),\n};\nrequest(app)\n  .post(\"/api/user/updateUser\")\n  .set(\"Authorization\", tokenJWT)\n  .send({\n    ...user,\n  })\n  .expect(400)\n  .then((res) => {\n    expect(res.body).to.have.all.keys(\"message\");\n    expect(res.body.message).to.equal(\n      '\"bio\" length must be less than or equal to 250 characters long'\n    );\n    done();\n  })\n  .catch((err) => done(err));",
              "err": {},
              "uuid": "2ad65633-ba95-49d2-afc5-bd1335739467",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have not updated user with previous tests",
              "fullTitle": "/api/user/updateUser should have not updated user with previous tests",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: \"Bob\",\n  lastName: \"Ross\",\n  username: \"bobross\",\n  email: \"bobross@bob.com\",\n  bio: \"\",\n};\nUser.findById(userId).then(\n  ({ firstName, lastName, username, email, bio }) => {\n    expect(firstName).to.equal(user.firstName);\n    expect(lastName).to.equal(user.lastName);\n    expect(username).to.equal(user.username);\n    expect(email).to.equal(user.email);\n    expect(bio).to.equal(user.bio);\n    done();\n  }\n);",
              "err": {},
              "uuid": "115c6c9f-c735-4764-a753-8528d6a152af",
              "parentUUID": "f217dccf-b76d-41d9-ac19-04169bbf1226",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9952571-f564-45fa-8bc1-9346031e79da",
            "4ac2b584-2ca8-4bc3-966a-d1f06f59c74e",
            "9686b618-c06e-4627-a911-f72b5be5a8fc",
            "4a12f8f7-f7c3-4bd3-94bd-175c196ea23a",
            "8e0ee5d7-7733-4c24-8edb-bdbb56478af1",
            "2cf68f36-6fdb-483a-b27e-e6cd3395e417",
            "1d346724-ca20-4485-850a-2933d65054e5",
            "e9d8e218-86ec-446d-9e5f-0f1c6101673d",
            "2ad65633-ba95-49d2-afc5-bd1335739467",
            "115c6c9f-c735-4764-a753-8528d6a152af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 522,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./testArtifact"
      },
      "version": "6.2.0"
    }
  }
}
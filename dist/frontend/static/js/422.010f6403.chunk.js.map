{"version":3,"file":"static/js/422.010f6403.chunk.js","mappings":"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","sources":["MessengerPage/MessengerSidePanel.js","MessengerPage/MessengerInput.js","MessengerPage/CallingModal.js","MessengerPage/Messages.js","MessengerPage/MessengerContent.js","MessengerPage/MessengerPage.js","_helpers/MediaHandler.js","_services/chatService.js","actions/chatActions.js","reusable/ReusableUtils.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { chatActions } from \"../actions/chatActions\";\r\n\r\nclass MessengerSidePanel extends Component {\r\n  componentDidMount = () => {\r\n    const { dispatch } = this.props;\r\n    dispatch(chatActions.getChatRooms());\r\n  };\r\n\r\n  changeRoom = room => {\r\n    const { dispatch } = this.props;\r\n    dispatch(chatActions.changeRoom(room));\r\n  };\r\n  //room.members.filter(member => member._id !== user.data._id);\r\n  handleSearch = e => {\r\n    const {\r\n      dispatch,\r\n      rooms,\r\n      user: { data }\r\n    } = this.props;\r\n    const users = rooms.filter(room => {\r\n      const user = room.members.filter(member => member._id !== data._id);\r\n      if (\r\n        user[0].firstName\r\n          .toLocaleLowerCase()\r\n          .includes(e.target.value.toLocaleLowerCase()) ||\r\n        user[0].lastName\r\n          .toLocaleLowerCase()\r\n          .includes(e.target.value.toLocaleLowerCase())\r\n      ) {\r\n        return room;\r\n      }\r\n      return null;\r\n    });\r\n    dispatch(chatActions.searchUsers(users));\r\n  };\r\n\r\n  render() {\r\n    const { user, rooms, searchedRooms, roomId } = this.props;\r\n    let renderRooms = searchedRooms ? searchedRooms : rooms;\r\n    const usersList = renderRooms.map(room => {\r\n      const member = room.members.filter(\r\n        member => member._id !== user.data._id\r\n      );\r\n      let message = \"...\";\r\n      if (room.lastMessage[0] && room.lastMessage[0].sender === user.data._id) {\r\n        if (room.lastMessage[0].messageType === \"text\") {\r\n          message = \"You: \" + room.lastMessage[0].text;\r\n        } else {\r\n          message = \"You sent image \";\r\n        }\r\n      } else if (room.lastMessage[0]) {\r\n        if (room.lastMessage[0].messageType === \"text\") {\r\n          message = room.lastMessage[0].text;\r\n        } else {\r\n          message = \"Image \";\r\n        }\r\n      }\r\n      return (\r\n        <li\r\n          className={room._id === roomId ? \"contact active\" : \"contact\"}\r\n          key={room._id}\r\n          onClick={() => this.changeRoom({ ...room, user: { ...member[0] } })}\r\n        >\r\n          <div className=\"wrap\">\r\n            <span\r\n              className={`contact-status ${member[0].activityStatus}`}\r\n            ></span>\r\n            <img\r\n              src={`/images/profile-picture/100x100/${member[0].profilePicture}`}\r\n              alt=\"\"\r\n            />\r\n            <div className=\"meta\">\r\n              <p className=\"name\">\r\n                {member[0].firstName + \" \" + member[0].lastName}\r\n              </p>\r\n              <p className=\"preview\">{message}</p>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div id=\"sidepanel\">\r\n        <div id=\"profile\">\r\n          <div className=\"wrap\">\r\n            <img\r\n              id=\"profile-img\"\r\n              src={`/images/profile-picture/100x100/${user.data.profilePicture}`}\r\n              className=\"online\"\r\n              alt=\"\"\r\n            />\r\n            <p>{user.data.firstName + \" \" + user.data.lastName}</p>\r\n            <i\r\n              className=\"fa fa-chevron-down expand-button\"\r\n              aria-hidden=\"true\"\r\n            ></i>\r\n            <div id=\"status-options\">\r\n              <ul>\r\n                <li id=\"status-online\" className=\"active\">\r\n                  <span className=\"status-circle\"></span>\r\n                  <p>Online</p>\r\n                </li>\r\n                <li id=\"status-offline\">\r\n                  <span className=\"status-circle\"></span>\r\n                  <p>Offline</p>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div id=\"search\">\r\n          <label htmlFor=\"\">\r\n            <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search contacts...\"\r\n            onChange={this.handleSearch}\r\n          />\r\n        </div>\r\n        <div id=\"contacts\">\r\n          <ul>{usersList.length ? usersList : \"No users\"}</ul>\r\n        </div>\r\n        <div id=\"bottom-bar\">\r\n          <button id=\"addcontact\">\r\n            <i className=\"fa fa-user-plus fa-fw\" aria-hidden=\"true\"></i>\r\n            <span>Add contact</span>\r\n          </button>\r\n          <button id=\"settings\">\r\n            <i className=\"fa fa-cog fa-fw\" aria-hidden=\"true\"></i>\r\n            <span>Settings</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  user: state.user,\r\n  rooms: state.chat.rooms,\r\n  searchedRooms: state.chat.searchedRooms,\r\n  roomId: state.chat.roomId\r\n});\r\n\r\nconst connectedMessengerSidePanel = connect(mapStateToProps)(\r\n  MessengerSidePanel\r\n);\r\nexport { connectedMessengerSidePanel as MessengerSidePanel };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { chatActions } from \"../actions/chatActions\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport uuid from \"uuid/v4\";\r\nimport { throttle } from \"throttle-debounce\";\r\nimport { alertActions } from \"../actions/alertActions\";\r\nimport {\r\n  extractImageFileExtensionFromBase64,\r\n  base64StringtoFile\r\n} from \"../reusable/ReusableUtils\";\r\n\r\nconst imageMaxSize = 10485760; // bytes 10MB\r\nconst acceptedFileTypes =\r\n  \"image/x-png, image/png, image/jpg, image/jpeg, image/gif\";\r\nconst acceptedFileTypesArray = acceptedFileTypes.split(\",\").map(item => {\r\n  return item.trim();\r\n});\r\n\r\nclass MessengerInput extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      value: \"\",\r\n      showPicker: false\r\n    };\r\n\r\n    this.debouncedTyping = throttle(3000, this.sendTypingStatus);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = null;\r\n  }\r\n\r\n  sendTypingStatus = () => {\r\n    const {\r\n      socket,\r\n      chat: { roomId, currentRoom }\r\n    } = this.props;\r\n    socket.emit(\"typing\", { roomId, userId: currentRoom.user._id });\r\n  };\r\n\r\n  handleChange = e => {\r\n    const {\r\n      socket,\r\n      chat: { roomId, currentRoom }\r\n    } = this.props;\r\n    this.debouncedTyping();\r\n    clearTimeout(this.timer);\r\n\r\n    this.setState({ value: e.target.value });\r\n    this.timer = setTimeout(() => {\r\n      socket.emit(\"stoppedTyping\", { roomId, userId: currentRoom.user._id });\r\n    }, 3000);\r\n  };\r\n\r\n  addEmoji = e => {\r\n    let emoji = e.native;\r\n    this.setState({\r\n      value: this.state.value + emoji\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const {\r\n      dispatch,\r\n      chat: { roomId, currentRoom },\r\n      userId\r\n    } = this.props;\r\n    const { value } = this.state;\r\n    if (value !== \"\") {\r\n      dispatch(\r\n        chatActions.sendMessage({\r\n          receiver: currentRoom.user,\r\n          value,\r\n          roomId,\r\n          sender: userId,\r\n          uuid: uuid()\r\n        })\r\n      );\r\n    }\r\n\r\n    this.setState({ value: \"\" });\r\n  };\r\n\r\n  toggleEmojiPicker = () => {\r\n    this.setState({ showPicker: !this.state.showPicker });\r\n  };\r\n\r\n  handleFileSelect = event => {\r\n    const {\r\n      dispatch,\r\n      chat: { roomId, currentRoom },\r\n      userId\r\n    } = this.props;\r\n    const files = event.target.files;\r\n    if (files && files.length > 0) {\r\n      const isVerified = this.verifyFile(files);\r\n      if (isVerified) {\r\n        // imageBase64Data\r\n        const currentFile = files[0];\r\n        const myFileItemReader = new FileReader();\r\n        myFileItemReader.addEventListener(\r\n          \"load\",\r\n          () => {\r\n            // console.log(myFileItemReader.result)\r\n            const myResult = myFileItemReader.result;\r\n            const imgSrcExt = extractImageFileExtensionFromBase64(myResult);\r\n            const myFilename = \"image.\" + imgSrcExt;\r\n            const myNewFile = base64StringtoFile(myResult, myFilename);\r\n            const fd = new FormData();\r\n            const uniqueId = uuid();\r\n            fd.append(\"receiver\", JSON.stringify(currentRoom.user));\r\n            fd.append(\"roomId\", roomId);\r\n            fd.append(\"uuid\", uniqueId);\r\n            fd.append(\"photo\", myNewFile, myNewFile.name);\r\n\r\n            dispatch(\r\n              chatActions.sendImage(fd, {\r\n                receiver: currentRoom.user,\r\n                value: \"Image\",\r\n                sender: userId,\r\n                roomId,\r\n                uuid: uniqueId\r\n              })\r\n            );\r\n          },\r\n          false\r\n        );\r\n\r\n        myFileItemReader.readAsDataURL(currentFile);\r\n      }\r\n    }\r\n  };\r\n\r\n  verifyFile = files => {\r\n    if (files && files.length > 0) {\r\n      const currentFile = files[0];\r\n      const currentFileType = currentFile.type;\r\n      const currentFileSize = currentFile.size;\r\n      const { dispatch } = this.props;\r\n\r\n      if (!acceptedFileTypesArray.includes(currentFileType)) {\r\n        dispatch(\r\n          alertActions.error(\r\n            \"This file is not allowed. Only images are allowed.\"\r\n          )\r\n        );\r\n\r\n        return false;\r\n      }\r\n\r\n      if (currentFileSize > imageMaxSize) {\r\n        dispatch(\r\n          alertActions.error(\r\n            \"This file is not allowed. \" +\r\n              currentFileSize +\r\n              \" bytes is too large\"\r\n          )\r\n        );\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const display = this.state.showPicker ? \"grid\" : \"none\";\r\n    return (\r\n      <div className=\"message-input\">\r\n        <div\r\n          style={{\r\n            display,\r\n            justifyItems: \"end\"\r\n          }}\r\n        >\r\n          <Picker native={true} onSelect={this.addEmoji} />\r\n        </div>\r\n        <div className=\"wrap\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input\r\n              onChange={this.handleChange}\r\n              value={value}\r\n              type=\"text\"\r\n              placeholder=\"Write your message...\"\r\n            />\r\n          </form>\r\n          <label>\r\n            <input\r\n              type=\"file\"\r\n              accept={acceptedFileTypes}\r\n              multiple={false}\r\n              onChange={this.handleFileSelect}\r\n            />\r\n            <i className=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\r\n          </label>\r\n\r\n          <button onClick={this.toggleEmojiPicker}>\r\n            <i className=\"fa fa-smile-o\" aria-hidden=\"true\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  chat: state.chat,\r\n  socket: state.socket.socket,\r\n  userId: state.user.data._id\r\n});\r\n\r\nconst connectedMessengerInput = connect(mapStateToProps)(MessengerInput);\r\nexport { connectedMessengerInput as MessengerInput };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { chatActions } from \"../actions/chatActions\";\r\nimport { Button, Modal } from \"semantic-ui-react\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport { MediaHandler } from \"../_helpers/MediaHandler\";\r\nimport Peer from \"simple-peer\";\r\n\r\nclass CallingModal extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      hasMedia: false\r\n    };\r\n\r\n    this.stream = null;\r\n    this.mediaHandler = new MediaHandler();\r\n  }\r\n\r\n  handleOpen = () => {\r\n    const { dispatch, currentRoom, roomId, socket } = this.props;\r\n    this.mediaHandler\r\n      .getPremissions()\r\n      .then(stream => {\r\n        this.setState({ hasMedia: true });\r\n        this.stream = stream;\r\n\r\n        this.peer = new Peer({\r\n          initiator: true,\r\n          stream: stream,\r\n          trickle: false\r\n        });\r\n\r\n        this.peer.on(\"error\", err => {\r\n          console.log(err);\r\n        });\r\n\r\n        this.peer.on(\"stream\", stream => {\r\n          this.userVideo.srcObject = stream;\r\n          this.userVideo.play();\r\n        });\r\n\r\n        socket.on(\"newAnswer\", data => {\r\n          this.peer.signal(data.webRtc);\r\n        });\r\n\r\n        this.peer.on(\"signal\", webRtc => {\r\n          dispatch(chatActions.call({ currentRoom, roomId, webRtc }));\r\n        });\r\n\r\n        this.peer.on(\"close\", () => {\r\n          this.mediaHandler.stopRecoring();\r\n          dispatch(chatActions.endCall());\r\n          this.setState({ hasMedia: false });\r\n        });\r\n\r\n        this.myVideo.srcObject = stream;\r\n        this.myVideo.play();\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  handleClose = () => {\r\n    const { dispatch } = this.props;\r\n\r\n    this.peer.destroy();\r\n\r\n    this.mediaHandler.stopRecoring();\r\n    dispatch(chatActions.endCall());\r\n    this.setState({ hasMedia: false });\r\n  };\r\n\r\n  render() {\r\n    const { callingModal } = this.props;\r\n\r\n    return (\r\n      <Modal\r\n        open={callingModal}\r\n        trigger={\r\n          <i\r\n            onClick={this.handleOpen}\r\n            className=\"fa fa-video-camera\"\r\n            aria-hidden=\"true\"\r\n          ></i>\r\n        }\r\n      >\r\n        <Modal.Content>\r\n          <video\r\n            style={{\r\n              width: 300,\r\n              height: \"auto\"\r\n            }}\r\n            ref={ref => {\r\n              this.myVideo = ref;\r\n            }}\r\n          ></video>\r\n          <video\r\n            style={{\r\n              width: 300,\r\n              height: \"auto\"\r\n            }}\r\n            ref={ref => {\r\n              this.userVideo = ref;\r\n            }}\r\n          ></video>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button negative onClick={this.handleClose}>\r\n            End call\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  userId: state.user.data._id,\r\n  profilePicture: state.user.data.profilePicture,\r\n  callingModal: state.chat.callingModal,\r\n  socket: state.socket.socket,\r\n  currentRoom: state.chat.currentRoom,\r\n  roomId: state.chat.roomId\r\n});\r\n\r\nconst connectedCallingModal = connect(mapStateToProps)(CallingModal);\r\nexport { connectedCallingModal as CallingModal };\r\n","import React from \"react\";\r\nimport { Popup } from \"semantic-ui-react\";\r\nimport Linkify from \"linkifyjs/react\";\r\nimport * as linkify from \"linkifyjs\";\r\nimport hashtag from \"linkifyjs/plugins/hashtag\";\r\nimport mention from \"linkifyjs/plugins/mention\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nhashtag(linkify);\r\nmention(linkify);\r\n\r\nconst linkifyOptions = {\r\n  formatHref: function (href, type) {\r\n    if (type === \"hashtag\") {\r\n      href = \"/hashtags/\" + href.substring(1);\r\n    }\r\n    if (type === \"mention\") {\r\n      href = \"/\" + href.substring(1);\r\n    }\r\n    return href;\r\n  },\r\n  attributes: {\r\n    target: {\r\n      url: \"_blank\",\r\n    },\r\n  },\r\n};\r\n\r\nfunction ShowImage({ show, image }) {\r\n  return show ? (\r\n    <img src={`/images/profile-picture/100x100/${image}`} alt=\"\" />\r\n  ) : (\r\n    <div></div>\r\n  );\r\n}\r\n\r\nconst MessengerMessages = ({\r\n  message,\r\n  userId,\r\n  profilePicture,\r\n  currentRoom,\r\n}) => {\r\n  if (message.sender === userId) {\r\n    if (message.sent === false) {\r\n      return (\r\n        <li className=\"replies\" key={message.uuid}>\r\n          <ShowImage image={profilePicture} show={message.picture}></ShowImage>\r\n          <p\r\n            style={{\r\n              backgroundColor: \"#f5f5f5\",\r\n              color: \"black\",\r\n              border: \"1px solid grey\",\r\n              wordWrap: \"break-word\",\r\n            }}\r\n          >\r\n            <Linkify options={linkifyOptions}>{message.value}</Linkify>\r\n          </p>\r\n        </li>\r\n      );\r\n    }\r\n    if (message.messageType === \"text\") {\r\n      return (\r\n        <li className=\"replies\">\r\n          <ShowImage image={profilePicture} show={message.picture}></ShowImage>\r\n          <Popup\r\n            content={\r\n              dayjs(message.createdAt).fromNow() + \", seen:\" + message.read\r\n            }\r\n            trigger={\r\n              <p>\r\n                <Linkify options={linkifyOptions}>{message.text}</Linkify>\r\n              </p>\r\n            }\r\n          />\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li className=\"replies\">\r\n          <ShowImage image={profilePicture} show={message.picture}></ShowImage>\r\n          <Popup\r\n            content={\r\n              dayjs(message.createdAt).fromNow() + \", seen:\" + message.read\r\n            }\r\n            trigger={\r\n              <img\r\n                style={{\r\n                  borderRadius: \"3%\",\r\n                  objectFit: \"cover\",\r\n                  width: \"40%\",\r\n                  height: \"20%\",\r\n                }}\r\n                src={`/images/chat-images/${message.photo}`}\r\n                alt=\"\"\r\n              />\r\n            }\r\n          />\r\n        </li>\r\n      );\r\n    }\r\n  } else {\r\n    if (message.sent === false) {\r\n      return (\r\n        <li className=\"sent\" key={message.uuid}>\r\n          <ShowImage\r\n            image={currentRoom.user.profilePicture}\r\n            show={message.picture}\r\n          ></ShowImage>\r\n          <p\r\n            style={{\r\n              backgroundColor: \"#f5f5f5\",\r\n              color: \"black\",\r\n              border: \"1px solid grey\",\r\n              wordWrap: \"break-word\",\r\n            }}\r\n          >\r\n            <Linkify options={linkifyOptions}>{message.value}</Linkify>\r\n          </p>\r\n        </li>\r\n      );\r\n    }\r\n    if (message.messageType === \"text\") {\r\n      return (\r\n        <li className=\"sent\">\r\n          <ShowImage\r\n            image={currentRoom.user.profilePicture}\r\n            show={message.picture}\r\n          ></ShowImage>\r\n\r\n          <Popup\r\n            content={\r\n              dayjs(message.createdAt).fromNow() + \", seen:\" + message.read\r\n            }\r\n            trigger={\r\n              <p>\r\n                {\" \"}\r\n                <Linkify options={linkifyOptions}>{message.text}</Linkify>\r\n              </p>\r\n            }\r\n          />\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li className=\"sent\">\r\n          <ShowImage\r\n            image={currentRoom.user.profilePicture}\r\n            show={message.picture}\r\n          ></ShowImage>\r\n          <Popup\r\n            content={\r\n              dayjs(message.createdAt).fromNow() + \", seen:\" + message.read\r\n            }\r\n            trigger={\r\n              <img\r\n                style={{\r\n                  borderRadius: \"3%\",\r\n                  objectFit: \"cover\",\r\n                  width: \"40%\",\r\n                  height: \"20%\",\r\n                }}\r\n                src={`/images/chat-images/${message.photo}`}\r\n                alt=\"\"\r\n              />\r\n            }\r\n          />\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default MessengerMessages;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { chatActions } from \"../actions/chatActions\";\r\nimport { MessengerInput } from \"./MessengerInput\";\r\nimport { Dimmer, Loader, Button, Popup, Label } from \"semantic-ui-react\";\r\nimport { CallingModal } from \"./CallingModal\";\r\nimport { animateScroll } from \"react-scroll\";\r\nimport MessengerMessages from \"./Messages\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\n\r\nclass MessengerContent extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.messagesContainer = React.createRef();\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { dispatch, currentRoom, roomId, userId, content } = this.props;\r\n\r\n    if (!content.messages.length) {\r\n      dispatch(\r\n        chatActions.getMessagesForRoom({ ...currentRoom, initialFetch: true })\r\n      );\r\n    } else {\r\n      const messageIds = content.messages\r\n        .filter(message => message.receiver === userId && !message.read)\r\n        .map(message => message._id);\r\n      if (messageIds.length) {\r\n        dispatch(chatActions.readMessages({ messageIds, roomId }));\r\n      }\r\n    }\r\n\r\n    this.handleScrollToBottom();\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    const { dispatch, roomId, content, userId } = this.props;\r\n    const messageIds = content.messages\r\n      .filter(message => message.receiver === userId && !message.read)\r\n      .map(message => message._id);\r\n    if (messageIds.length) {\r\n      dispatch(chatActions.readMessages({ messageIds, roomId }));\r\n    }\r\n    this.scrollToBottom();\r\n  };\r\n\r\n  scrollToBottom() {\r\n    //console.log(this.messagesContainer.current.scrollHeight);\r\n\r\n    if (\r\n      this.messagesContainer.current.scrollHeight -\r\n        this.messagesContainer.current.scrollTop -\r\n        this.messagesContainer.current.clientHeight <\r\n      350\r\n    ) {\r\n      animateScroll.scrollToBottom({\r\n        containerId: \"ContainerElementID\",\r\n        duration: 200,\r\n        delay: 0\r\n      });\r\n    }\r\n  }\r\n\r\n  handleScrollToBottom = () => {\r\n    animateScroll.scrollToBottom({\r\n      containerId: \"ContainerElementID\",\r\n      duration: 500,\r\n      delay: 0\r\n    });\r\n  };\r\n\r\n  fetchMessages = () => {\r\n    const { dispatch, currentRoom, content } = this.props;\r\n    const lastId = content.messages[0]._id;\r\n    dispatch(\r\n      chatActions.getMessagesForRoom({\r\n        ...currentRoom,\r\n        lastId,\r\n        initialFetch: false\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { currentRoom, content, userId, profilePicture } = this.props;\r\n\r\n    const loadedMessages = currentRoom.messages - content.messages.length;\r\n    const messages = content.messages.map(message => (\r\n      <MessengerMessages\r\n        key={message._id || message.uuid}\r\n        currentRoom={currentRoom}\r\n        message={message}\r\n        userId={userId}\r\n        profilePicture={profilePicture}\r\n      ></MessengerMessages>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        {content.initialMessagesFetchig ? (\r\n          <Dimmer active>\r\n            <Loader />\r\n          </Dimmer>\r\n        ) : null}\r\n        <div className=\"contact-profile\">\r\n          <img\r\n            src={`/images/profile-picture/100x100/${currentRoom.user.profilePicture}`}\r\n            alt=\"\"\r\n          />\r\n          <p>{currentRoom.user.firstName + \" \" + currentRoom.user.lastName}</p>\r\n          <div className=\"social-media\">\r\n            <Popup\r\n              content=\"Scroll to bottom.\"\r\n              trigger={\r\n                <i\r\n                  onClick={this.handleScrollToBottom}\r\n                  className=\"fa fa-arrow-down\"\r\n                  aria-hidden=\"true\"\r\n                ></i>\r\n              }\r\n            />\r\n\r\n            <CallingModal></CallingModal>\r\n            <Label basic color=\"red\" pointing=\"left\">\r\n              This isn't working.\r\n            </Label>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"messages\"\r\n          id=\"ContainerElementID\"\r\n          ref={this.messagesContainer}\r\n        >\r\n          {loadedMessages ? (\r\n            <Button\r\n              fluid\r\n              disabled={content.messageFetching}\r\n              loading={content.messageFetching}\r\n              onClick={this.fetchMessages}\r\n            >\r\n              Load {currentRoom.messages - content.messages.length} more\r\n            </Button>\r\n          ) : null}\r\n\r\n          <ul>\r\n            {messages}\r\n            {content.isTyping ? (\r\n              <li className=\"sent\" key={currentRoom.user._id}>\r\n                <img\r\n                  src={`/images/profile-picture/100x100/${currentRoom.user.profilePicture}`}\r\n                  alt=\"\"\r\n                />\r\n                <p>typing...</p>\r\n              </li>\r\n            ) : null}\r\n          </ul>\r\n        </div>\r\n        <MessengerInput></MessengerInput>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  userId: state.user.data._id,\r\n  profilePicture: state.user.data.profilePicture,\r\n  callingModal: state.chat.callingModal,\r\n  socket: state.socket.socket,\r\n  currentRoom: state.chat.currentRoom,\r\n  roomId: state.chat.roomId\r\n});\r\n\r\nconst connectedMessengerContent = connect(mapStateToProps)(MessengerContent);\r\nexport { connectedMessengerContent as MessengerContent };\r\n","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { MessengerSidePanel } from \"./MessengerSidePanel\";\r\nimport { MessengerContent } from \"./MessengerContent\";\r\n\r\nclass MessengerPage extends Component {\r\n  componentDidMount = () => {\r\n    document.title = \"Messages | social-network\";\r\n  };\r\n\r\n  render() {\r\n    const { chat, roomId } = this.props;\r\n    return (\r\n      <div id=\"frame\">\r\n        <MessengerSidePanel></MessengerSidePanel>\r\n        {chat.currentRoom ? (\r\n          <MessengerContent\r\n            content={chat[roomId]}\r\n            key={roomId}\r\n          ></MessengerContent>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  roomId: state.chat.roomId,\r\n  chat: state.chat\r\n});\r\n\r\nconst connectedMessengerPage = connect(mapStateToProps)(MessengerPage);\r\nexport { connectedMessengerPage as default };\r\n","export class MediaHandler {\r\n  constructor() {\r\n    this.stream = null;\r\n  }\r\n  getPremissions() {\r\n    return new Promise((resolve, rej) => {\r\n      navigator.mediaDevices\r\n        .getUserMedia({ video: true, audio: true })\r\n        .then(stream => {\r\n          this.stream = stream;\r\n          resolve(stream);\r\n        })\r\n        .catch(err => {\r\n          throw new Error(\"Unable to fetch stream \" + err);\r\n        });\r\n    });\r\n  }\r\n  stopRecoring() {\r\n    this.stream.getTracks().forEach(function(track) {\r\n      track.stop();\r\n    });\r\n  }\r\n}\r\n","export const chatService = {\r\n  getChatRooms,\r\n  getMessagesForRoom,\r\n  sendMessage,\r\n  sendImage,\r\n  readMessages,\r\n  call,\r\n  answer\r\n};\r\n\r\nfunction logout() {\r\n  // remove user from local storage to log user out\r\n  localStorage.removeItem(\"user\");\r\n}\r\n\r\nfunction getChatRooms() {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n    }\r\n  };\r\n\r\n  return fetch(\"/api/chat/getChatRooms/\", requestOptions)\r\n    .then(handleResponse)\r\n    .then(res => {\r\n      return res;\r\n    });\r\n}\r\n\r\nfunction readMessages(params) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n    },\r\n    body: JSON.stringify({\r\n      ...params\r\n    })\r\n  };\r\n\r\n  return fetch(\"/api/chat/readMessages/\", requestOptions)\r\n    .then(handleResponse)\r\n    .then(res => {\r\n      return res;\r\n    });\r\n}\r\n\r\nfunction getMessagesForRoom(room) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n    },\r\n    body: JSON.stringify({\r\n      ...room\r\n    })\r\n  };\r\n\r\n  return fetch(\"/api/chat/getMessagesForRoom/\", requestOptions)\r\n    .then(handleResponse)\r\n    .then(res => {\r\n      return res;\r\n    });\r\n}\r\n\r\nfunction sendMessage(params) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n    },\r\n    body: JSON.stringify({\r\n      ...params\r\n    })\r\n  };\r\n\r\n  return fetch(\"/api/chat/sendMessage/\", requestOptions)\r\n    .then(handleResponse)\r\n    .then(res => {\r\n      return res;\r\n    });\r\n}\r\n\r\nfunction sendImage(data) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n    },\r\n    body: data\r\n  };\r\n\r\n  return fetch(\"/api/chat/sendImage/\", requestOptions)\r\n    .then(handleResponse)\r\n    .then(res => {\r\n      return res;\r\n    });\r\n}\r\n\r\nfunction call(data) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n    },\r\n    body: JSON.stringify({\r\n      ...data\r\n    })\r\n  };\r\n\r\n  return fetch(\"/api/chat/call/\", requestOptions)\r\n    .then(handleResponse)\r\n    .then(res => {\r\n      return res;\r\n    });\r\n}\r\n\r\nfunction answer(data) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n    },\r\n    body: JSON.stringify({\r\n      ...data\r\n    })\r\n  };\r\n\r\n  return fetch(\"/api/chat/answer/\", requestOptions)\r\n    .then(handleResponse)\r\n    .then(res => {\r\n      return res;\r\n    });\r\n}\r\n\r\nfunction handleResponse(response) {\r\n  return response.text().then(text => {\r\n    const data = text && JSON.parse(text);\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        // auto logout if 401 response returned from api\r\n        logout();\r\n        window.location.reload(true);\r\n      }\r\n\r\n      const error = (data && data.message) || response.statusText;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return data;\r\n  });\r\n}\r\n","import { chatConstants } from \"../_constants/chatConstants\";\r\nimport { chatService } from \"../_services/chatService\";\r\n\r\nexport const chatActions = {\r\n  typing,\r\n  stoppedTyping,\r\n  changeRoom,\r\n  getChatRooms,\r\n  getMessagesForRoom,\r\n  sendMessage,\r\n  sendImage,\r\n  newMessage,\r\n  readMessages,\r\n  changeActivityStatus,\r\n  imageMessageRequest,\r\n  call,\r\n  answer,\r\n  endCall,\r\n  endAnsweringCall,\r\n  searchUsers\r\n};\r\n\r\nfunction typing(roomId) {\r\n  return dispatch => {\r\n    dispatch({ type: chatConstants.TYPING, roomId });\r\n  };\r\n}\r\n\r\nfunction stoppedTyping(roomId) {\r\n  return dispatch => {\r\n    dispatch({ type: chatConstants.STOPPED_TYPING, roomId });\r\n  };\r\n}\r\n\r\nfunction initiateMessageArray(roomId) {\r\n  return { type: chatConstants.INIT_MESSAGE_ARRAY, roomId };\r\n}\r\n\r\nfunction changeRoom(room) {\r\n  return dispatch => {\r\n    dispatch({ type: chatConstants.CHANGE_ROOM, room });\r\n  };\r\n}\r\n\r\nfunction readMessages(params) {\r\n  const { messageIds, roomId } = params;\r\n  return dispatch => {\r\n    dispatch(read(messageIds, roomId));\r\n    chatService.readMessages(params).then(\r\n      () => {},\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n  function read(messageIds, roomId) {\r\n    return { type: chatConstants.READ_MESSAGES, messageIds, roomId };\r\n  }\r\n}\r\n\r\nfunction getChatRooms() {\r\n  return dispatch => {\r\n    dispatch(request());\r\n\r\n    chatService.getChatRooms().then(\r\n      response => {\r\n        dispatch(success(response.rooms));\r\n\r\n        response.rooms.forEach(room =>\r\n          dispatch(initiateMessageArray(room._id))\r\n        );\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n  function request() {\r\n    return { type: chatConstants.GET_ROOMS_REQUEST };\r\n  }\r\n  function success(rooms) {\r\n    return { type: chatConstants.GET_ROOMS_SUCCESS, rooms };\r\n  }\r\n}\r\n\r\nfunction changeActivityStatus(user) {\r\n  return dispatch => {\r\n    dispatch({ type: chatConstants.CHANGE_ACTIVITY_STATUS, user });\r\n  };\r\n}\r\n\r\nfunction getMessagesForRoom(room) {\r\n  return dispatch => {\r\n    if (room.initialFetch) {\r\n      dispatch(initialRequest(room._id));\r\n    } else {\r\n      dispatch(request(room._id));\r\n    }\r\n    chatService.getMessagesForRoom(room).then(\r\n      response => {\r\n        dispatch(\r\n          success({ messages: response.messages.reverse(), roomId: room._id })\r\n        );\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n  function request(roomId) {\r\n    return { type: chatConstants.GET_MESSAGES_REQUEST, roomId };\r\n  }\r\n  function initialRequest(roomId) {\r\n    return { type: chatConstants.GET_MESSAGES_INITIAL_REQUEST, roomId };\r\n  }\r\n  function success(data) {\r\n    return { type: chatConstants.GET_MESSAGES_SUCCESS, data };\r\n  }\r\n}\r\n\r\nfunction sendMessage(message) {\r\n  return dispatch => {\r\n    dispatch(request({ ...message, sent: false }));\r\n\r\n    chatService.sendMessage(message).then(\r\n      response => {\r\n        dispatch(success(response.message));\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n  function request(message) {\r\n    return { type: chatConstants.SEND_MESSAGE_REQUEST, message };\r\n  }\r\n  function success(message) {\r\n    return { type: chatConstants.SEND_MESSAGE_SUCCESS, message };\r\n  }\r\n}\r\n\r\nfunction sendImage(data, message) {\r\n  return dispatch => {\r\n    dispatch(request({ ...message, sent: false }));\r\n\r\n    chatService.sendImage(data).then(\r\n      response => {\r\n        dispatch(success(response.message));\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n  function request(message) {\r\n    return { type: chatConstants.SEND_MESSAGE_REQUEST, message };\r\n  }\r\n  function success(message) {\r\n    return { type: chatConstants.SEND_MESSAGE_SUCCESS, message };\r\n  }\r\n}\r\n\r\nfunction newMessage(message) {\r\n  return dispatch => {\r\n    dispatch(success(message));\r\n    dispatch({ type: chatConstants.INC_MESSAGE_COUNT });\r\n  };\r\n  function success(message) {\r\n    return { type: chatConstants.NEW_MESSAGE, message };\r\n  }\r\n}\r\n\r\nfunction imageMessageRequest(message) {\r\n  return dispatch => {\r\n    dispatch(success(message));\r\n  };\r\n  function success(message) {\r\n    return { type: chatConstants.NEW_IMAGE_MESSAGE_REQUEST, message };\r\n  }\r\n}\r\n\r\nfunction call(data) {\r\n  return dispatch => {\r\n    dispatch({ type: chatConstants.OPEN_CALLING_MODAL });\r\n\r\n    chatService.call(data).then(\r\n      () => {},\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nfunction answer(data) {\r\n  return dispatch => {\r\n    chatService.answer(data).then(\r\n      () => {},\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nfunction endCall() {\r\n  return dispatch => {\r\n    dispatch({ type: chatConstants.CLOSE_CALLING_MODAL });\r\n  };\r\n}\r\n\r\nfunction endAnsweringCall() {\r\n  return dispatch => {\r\n    dispatch({ type: chatConstants.CLOSE_ANSWERING_MODAL });\r\n  };\r\n}\r\n\r\nfunction searchUsers(rooms) {\r\n  return dispatch => {\r\n    dispatch({ type: chatConstants.SEARCH_USERS, rooms });\r\n  };\r\n}\r\n","// A few JavaScript Functions for Images and Files\r\n// Author: Justin Mitchel\r\n// Source: https://kirr.co/ndywes\r\n\r\n// Convert a Base64-encoded string to a File object\r\nexport function base64StringtoFile(base64String, filename) {\r\n  var arr = base64String.split(\",\"),\r\n    mime = arr[0].match(/:(.*?);/)[1],\r\n    bstr = atob(arr[1]),\r\n    n = bstr.length,\r\n    u8arr = new Uint8Array(n);\r\n  while (n--) {\r\n    u8arr[n] = bstr.charCodeAt(n);\r\n  }\r\n  return new File([u8arr], filename, { type: mime });\r\n}\r\n\r\n// Download a Base64-encoded file\r\n\r\nexport function downloadBase64File(base64Data, filename) {\r\n  var element = document.createElement(\"a\");\r\n  element.setAttribute(\"href\", base64Data);\r\n  element.setAttribute(\"download\", filename);\r\n  element.style.display = \"none\";\r\n  document.body.appendChild(element);\r\n  element.click();\r\n  document.body.removeChild(element);\r\n}\r\n\r\n// Extract an Base64 Image's File Extension\r\nexport function extractImageFileExtensionFromBase64(base64Data) {\r\n  return base64Data.substring(\r\n    \"data:image/\".length,\r\n    base64Data.indexOf(\";base64\")\r\n  );\r\n}\r\n\r\n// Base64 Image to Canvas with a Crop\r\nexport function image64toCanvasRef(canvasRef, image64, pixelCrop) {\r\n  const canvas = canvasRef; // document.createElement('canvas');\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n  const ctx = canvas.getContext(\"2d\");\r\n  const image = new Image();\r\n  image.src = image64;\r\n  image.onload = function() {\r\n    ctx.drawImage(\r\n      image,\r\n      pixelCrop.x,\r\n      pixelCrop.y,\r\n      pixelCrop.width,\r\n      pixelCrop.height,\r\n      0,\r\n      0,\r\n      pixelCrop.width,\r\n      pixelCrop.height\r\n    );\r\n  };\r\n}\r\n"],"names":["MessengerSidePanel","Component","constructor","arguments","componentDidMount","dispatch","this","props","chatActions","getChatRooms","changeRoom","room","handleSearch","e","rooms","user","data","users","filter","members","member","_id","firstName","toLocaleLowerCase","includes","target","value","lastName","searchUsers","render","searchedRooms","roomId","usersList","map","message","lastMessage","sender","messageType","text","_jsx","className","onClick","children","_jsxs","concat","activityStatus","src","profilePicture","alt","id","htmlFor","type","placeholder","onChange","length","connectedMessengerSidePanel","connect","state","chat","acceptedFileTypes","acceptedFileTypesArray","split","item","trim","MessengerInput","super","sendTypingStatus","socket","currentRoom","emit","userId","handleChange","debouncedTyping","clearTimeout","timer","setState","setTimeout","addEmoji","emoji","native","handleSubmit","preventDefault","sendMessage","receiver","uuid","toggleEmojiPicker","showPicker","handleFileSelect","event","files","verifyFile","currentFile","myFileItemReader","FileReader","addEventListener","myResult","result","myFilename","extractImageFileExtensionFromBase64","myNewFile","base64StringtoFile","fd","FormData","uniqueId","append","JSON","stringify","name","sendImage","readAsDataURL","currentFileType","currentFileSize","size","alertActions","error","throttle","display","style","justifyItems","Picker","onSelect","onSubmit","accept","multiple","connectedMessengerInput","CallingModal","handleOpen","mediaHandler","getPremissions","then","stream","hasMedia","peer","Peer","initiator","trickle","on","err","console","log","userVideo","srcObject","play","signal","webRtc","call","stopRecoring","endCall","myVideo","catch","handleClose","destroy","MediaHandler","callingModal","Modal","open","trigger","Content","width","height","ref","Actions","Button","negative","connectedCallingModal","dayjs","relativeTime","hashtag","linkify","mention","linkifyOptions","formatHref","href","substring","attributes","url","ShowImage","_ref","show","image","_ref2","sent","picture","backgroundColor","color","border","wordWrap","Linkify","options","Popup","content","createdAt","fromNow","read","borderRadius","objectFit","photo","MessengerContent","messages","messageIds","readMessages","getMessagesForRoom","initialFetch","handleScrollToBottom","componentDidUpdate","scrollToBottom","animateScroll","containerId","duration","delay","fetchMessages","lastId","messagesContainer","React","current","scrollHeight","scrollTop","clientHeight","loadedMessages","MessengerMessages","initialMessagesFetchig","Dimmer","active","Loader","Label","basic","pointing","fluid","disabled","messageFetching","loading","isTyping","connectedMessengerContent","MessengerPage","document","title","connectedMessengerPage","Promise","resolve","rej","navigator","mediaDevices","getUserMedia","video","audio","Error","getTracks","forEach","track","stop","chatService","requestOptions","method","headers","Authorization","parse","localStorage","getItem","token","fetch","handleResponse","res","body","params","answer","response","ok","status","removeItem","window","location","reload","statusText","reject","typing","chatConstants","TYPING","stoppedTyping","STOPPED_TYPING","CHANGE_ROOM","GET_ROOMS_REQUEST","GET_ROOMS_SUCCESS","INIT_MESSAGE_ARRAY","GET_MESSAGES_INITIAL_REQUEST","GET_MESSAGES_REQUEST","request","reverse","GET_MESSAGES_SUCCESS","SEND_MESSAGE_REQUEST","SEND_MESSAGE_SUCCESS","success","newMessage","NEW_MESSAGE","INC_MESSAGE_COUNT","READ_MESSAGES","changeActivityStatus","CHANGE_ACTIVITY_STATUS","imageMessageRequest","NEW_IMAGE_MESSAGE_REQUEST","OPEN_CALLING_MODAL","CLOSE_CALLING_MODAL","endAnsweringCall","CLOSE_ANSWERING_MODAL","SEARCH_USERS","base64String","filename","arr","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","File","base64Data","indexOf","image64toCanvasRef","canvasRef","image64","pixelCrop","canvas","ctx","getContext","Image","onload","drawImage","x","y"],"sourceRoot":""}